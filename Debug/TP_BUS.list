
TP_BUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004adc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e08  08004e08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000070  08004e80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08004e80  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfea  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002700  00000000  00000000  0002e0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000995  00000000  00000000  00031440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023476  00000000  00000000  00031dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f94  00000000  00000000  0005524b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf027  00000000  00000000  000671df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039e0  00000000  00000000  00136208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00139be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c94 	.word	0x08004c94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004c94 	.word	0x08004c94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_CAN1_Init+0x60>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_CAN1_Init+0x64>)
 80005b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_CAN1_Init+0x60>)
 80005b8:	2210      	movs	r2, #16
 80005ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_CAN1_Init+0x60>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_CAN1_Init+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_CAN1_Init+0x60>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_CAN1_Init+0x60>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_CAN1_Init+0x60>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_CAN1_Init+0x60>)
 80005dc:	2200      	movs	r2, #0
 80005de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_CAN1_Init+0x60>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_CAN1_Init+0x60>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_CAN1_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_CAN1_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_CAN1_Init+0x60>)
 80005fa:	f000 fead 	bl	8001358 <HAL_CAN_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000604:	f000 fbf8 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000008c 	.word	0x2000008c
 8000610:	40006400 	.word	0x40006400

08000614 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a19      	ldr	r2, [pc, #100]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d12c      	bne.n	8000690 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <HAL_CAN_MspInit+0x88>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <HAL_CAN_MspInit+0x88>)
 8000640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000644:	6413      	str	r3, [r2, #64]	; 0x40
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_CAN_MspInit+0x88>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <HAL_CAN_MspInit+0x88>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a10      	ldr	r2, [pc, #64]	; (800069c <HAL_CAN_MspInit+0x88>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <HAL_CAN_MspInit+0x88>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800066e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000680:	2309      	movs	r3, #9
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <HAL_CAN_MspInit+0x8c>)
 800068c:	f001 f846 	bl	800171c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	; 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40006400 	.word	0x40006400
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020000 	.word	0x40020000

080006a4 <checkID>:
signed short dig_P6 = 0;
signed short dig_P7 = 0;
signed short dig_P8 = 0;
signed short dig_P9 = 0;

int checkID(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af02      	add	r7, sp, #8
	uint8_t buffer[1];
	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, &ID_address, 1, HAL_MAX_DELAY);
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <checkID+0x7c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b299      	uxth	r1, r3
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <checkID+0x80>)
 80006ba:	481b      	ldr	r0, [pc, #108]	; (8000728 <checkID+0x84>)
 80006bc:	f001 fb20 	bl	8001d00 <HAL_I2C_Master_Transmit>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <checkID+0x88>)
 80006c6:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <checkID+0x88>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d004      	beq.n	80006da <checkID+0x36>
		printf("Problème avec l'I2C\r\n");
 80006d0:	4817      	ldr	r0, [pc, #92]	; (8000730 <checkID+0x8c>)
 80006d2:	f003 fc77 	bl	8003fc4 <puts>
		return 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e01d      	b.n	8000716 <checkID+0x72>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, buffer, 1, HAL_MAX_DELAY);
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <checkID+0x7c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b299      	uxth	r1, r3
 80006e0:	1d3a      	adds	r2, r7, #4
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2301      	movs	r3, #1
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <checkID+0x84>)
 80006ec:	f001 fc06 	bl	8001efc <HAL_I2C_Master_Receive>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <checkID+0x88>)
 80006f6:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <checkID+0x88>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d004      	beq.n	800070a <checkID+0x66>
		printf("Problème avec l'I2C\r\n");
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <checkID+0x8c>)
 8000702:	f003 fc5f 	bl	8003fc4 <puts>
		return 1;
 8000706:	2301      	movs	r3, #1
 8000708:	e005      	b.n	8000716 <checkID+0x72>
	}
	printf("L'ID du capteur est 0x%x\r\n",buffer[0]);
 800070a:	793b      	ldrb	r3, [r7, #4]
 800070c:	4619      	mov	r1, r3
 800070e:	4809      	ldr	r0, [pc, #36]	; (8000734 <checkID+0x90>)
 8000710:	f003 fbf2 	bl	8003ef8 <iprintf>
	return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000000 	.word	0x20000000
 8000724:	20000001 	.word	0x20000001
 8000728:	200000d0 	.word	0x200000d0
 800072c:	200000b4 	.word	0x200000b4
 8000730:	08004cac 	.word	0x08004cac
 8000734:	08004cc4 	.word	0x08004cc4

08000738 <BMP280_config>:


int BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af02      	add	r7, sp, #8
	uint8_t buffer[1];
	uint8_t buf[2];
	buf[0]= ctrl_meas;
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <BMP280_config+0x90>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	703b      	strb	r3, [r7, #0]
	buf[1]= config;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <BMP280_config+0x94>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	707b      	strb	r3, [r7, #1]
	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, buf, 2, HAL_MAX_DELAY);
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <BMP280_config+0x98>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b299      	uxth	r1, r3
 8000750:	463a      	mov	r2, r7
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2302      	movs	r3, #2
 800075a:	481e      	ldr	r0, [pc, #120]	; (80007d4 <BMP280_config+0x9c>)
 800075c:	f001 fad0 	bl	8001d00 <HAL_I2C_Master_Transmit>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <BMP280_config+0xa0>)
 8000766:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <BMP280_config+0xa0>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <BMP280_config+0x42>
		printf("Problème avec l'I2C\r\n");
 8000770:	481a      	ldr	r0, [pc, #104]	; (80007dc <BMP280_config+0xa4>)
 8000772:	f003 fc27 	bl	8003fc4 <puts>
		return 1;
 8000776:	2301      	movs	r3, #1
 8000778:	e022      	b.n	80007c0 <BMP280_config+0x88>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, buffer, 1, HAL_MAX_DELAY);
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <BMP280_config+0x98>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b299      	uxth	r1, r3
 8000780:	1d3a      	adds	r2, r7, #4
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <BMP280_config+0x9c>)
 800078c:	f001 fbb6 	bl	8001efc <HAL_I2C_Master_Receive>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <BMP280_config+0xa0>)
 8000796:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <BMP280_config+0xa0>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <BMP280_config+0x72>
		printf("Problème avec l'I2C\r\n");
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <BMP280_config+0xa4>)
 80007a2:	f003 fc0f 	bl	8003fc4 <puts>
		return 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00a      	b.n	80007c0 <BMP280_config+0x88>
	}

	if(buffer[0] == config){
 80007aa:	793a      	ldrb	r2, [r7, #4]
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <BMP280_config+0x94>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d104      	bne.n	80007be <BMP280_config+0x86>
		printf("La config reçue est bien reçue\r\n");
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <BMP280_config+0xa8>)
 80007b6:	f003 fc05 	bl	8003fc4 <puts>
		return 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <BMP280_config+0x88>
	}
	return 1;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000002 	.word	0x20000002
 80007cc:	20000006 	.word	0x20000006
 80007d0:	20000000 	.word	0x20000000
 80007d4:	200000d0 	.word	0x200000d0
 80007d8:	200000b4 	.word	0x200000b4
 80007dc:	08004cac 	.word	0x08004cac
 80007e0:	08004ce0 	.word	0x08004ce0

080007e4 <BMP280_etalonnage>:

void BMP280_etalonnage(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af02      	add	r7, sp, #8
	uint8_t receive_buf[24];

	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, &calib, 1, HAL_MAX_DELAY);
 80007ea:	4b58      	ldr	r3, [pc, #352]	; (800094c <BMP280_etalonnage+0x168>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b299      	uxth	r1, r3
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	4a55      	ldr	r2, [pc, #340]	; (8000950 <BMP280_etalonnage+0x16c>)
 80007fa:	4856      	ldr	r0, [pc, #344]	; (8000954 <BMP280_etalonnage+0x170>)
 80007fc:	f001 fa80 	bl	8001d00 <HAL_I2C_Master_Transmit>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b54      	ldr	r3, [pc, #336]	; (8000958 <BMP280_etalonnage+0x174>)
 8000806:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000808:	4b53      	ldr	r3, [pc, #332]	; (8000958 <BMP280_etalonnage+0x174>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d002      	beq.n	8000816 <BMP280_etalonnage+0x32>
		printf("Problème avec l'I2C\r\n");
 8000810:	4852      	ldr	r0, [pc, #328]	; (800095c <BMP280_etalonnage+0x178>)
 8000812:	f003 fbd7 	bl	8003fc4 <puts>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, receive_buf, 24, HAL_MAX_DELAY);
 8000816:	4b4d      	ldr	r3, [pc, #308]	; (800094c <BMP280_etalonnage+0x168>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b299      	uxth	r1, r3
 800081c:	1d3a      	adds	r2, r7, #4
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2318      	movs	r3, #24
 8000826:	484b      	ldr	r0, [pc, #300]	; (8000954 <BMP280_etalonnage+0x170>)
 8000828:	f001 fb68 	bl	8001efc <HAL_I2C_Master_Receive>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b49      	ldr	r3, [pc, #292]	; (8000958 <BMP280_etalonnage+0x174>)
 8000832:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000834:	4b48      	ldr	r3, [pc, #288]	; (8000958 <BMP280_etalonnage+0x174>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <BMP280_etalonnage+0x5e>
		printf("Problème avec l'I2C\r\n");
 800083c:	4847      	ldr	r0, [pc, #284]	; (800095c <BMP280_etalonnage+0x178>)
 800083e:	f003 fbc1 	bl	8003fc4 <puts>
	}
	printf("les valeurs de l'étallonage sont :\r\n");
 8000842:	4847      	ldr	r0, [pc, #284]	; (8000960 <BMP280_etalonnage+0x17c>)
 8000844:	f003 fbbe 	bl	8003fc4 <puts>
	for(int i=0;i<24;i++){
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	e00b      	b.n	8000866 <BMP280_etalonnage+0x82>
		printf("calib %2d = 0x%x\r\n",i,receive_buf[i]);
 800084e:	1d3a      	adds	r2, r7, #4
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	69f9      	ldr	r1, [r7, #28]
 800085a:	4842      	ldr	r0, [pc, #264]	; (8000964 <BMP280_etalonnage+0x180>)
 800085c:	f003 fb4c 	bl	8003ef8 <iprintf>
	for(int i=0;i<24;i++){
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	3301      	adds	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	2b17      	cmp	r3, #23
 800086a:	ddf0      	ble.n	800084e <BMP280_etalonnage+0x6a>
	}
	dig_T1 = receive_buf[0]|(receive_buf[1]<<8);
 800086c:	793b      	ldrb	r3, [r7, #4]
 800086e:	b21a      	sxth	r2, r3
 8000870:	797b      	ldrb	r3, [r7, #5]
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b21b      	sxth	r3, r3
 8000876:	4313      	orrs	r3, r2
 8000878:	b21a      	sxth	r2, r3
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <BMP280_etalonnage+0x184>)
 800087c:	801a      	strh	r2, [r3, #0]
	dig_T2 = receive_buf[2]|(receive_buf[3]<<8);
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	b21a      	sxth	r2, r3
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	b21b      	sxth	r3, r3
 8000888:	4313      	orrs	r3, r2
 800088a:	b21a      	sxth	r2, r3
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <BMP280_etalonnage+0x188>)
 800088e:	801a      	strh	r2, [r3, #0]
	dig_T3 = receive_buf[4]|(receive_buf[5]<<8);
 8000890:	7a3b      	ldrb	r3, [r7, #8]
 8000892:	b21a      	sxth	r2, r3
 8000894:	7a7b      	ldrb	r3, [r7, #9]
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	b21b      	sxth	r3, r3
 800089a:	4313      	orrs	r3, r2
 800089c:	b21a      	sxth	r2, r3
 800089e:	4b34      	ldr	r3, [pc, #208]	; (8000970 <BMP280_etalonnage+0x18c>)
 80008a0:	801a      	strh	r2, [r3, #0]
	dig_P1 = receive_buf[6]|(receive_buf[7]<<8);
 80008a2:	7abb      	ldrb	r3, [r7, #10]
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	7afb      	ldrb	r3, [r7, #11]
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	4b30      	ldr	r3, [pc, #192]	; (8000974 <BMP280_etalonnage+0x190>)
 80008b2:	801a      	strh	r2, [r3, #0]
	dig_P2 = receive_buf[8]|(receive_buf[9]<<8);
 80008b4:	7b3b      	ldrb	r3, [r7, #12]
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	7b7b      	ldrb	r3, [r7, #13]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21a      	sxth	r2, r3
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <BMP280_etalonnage+0x194>)
 80008c4:	801a      	strh	r2, [r3, #0]
	dig_P3 = receive_buf[10]|(receive_buf[11]<<8);
 80008c6:	7bbb      	ldrb	r3, [r7, #14]
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <BMP280_etalonnage+0x198>)
 80008d6:	801a      	strh	r2, [r3, #0]
	dig_P4 = receive_buf[12]|(receive_buf[13]<<8);
 80008d8:	7c3b      	ldrb	r3, [r7, #16]
 80008da:	b21a      	sxth	r2, r3
 80008dc:	7c7b      	ldrb	r3, [r7, #17]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <BMP280_etalonnage+0x19c>)
 80008e8:	801a      	strh	r2, [r3, #0]
	dig_P5 = receive_buf[14]|(receive_buf[15]<<8);
 80008ea:	7cbb      	ldrb	r3, [r7, #18]
 80008ec:	b21a      	sxth	r2, r3
 80008ee:	7cfb      	ldrb	r3, [r7, #19]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <BMP280_etalonnage+0x1a0>)
 80008fa:	801a      	strh	r2, [r3, #0]
	dig_P6 = receive_buf[16]|(receive_buf[17]<<8);
 80008fc:	7d3b      	ldrb	r3, [r7, #20]
 80008fe:	b21a      	sxth	r2, r3
 8000900:	7d7b      	ldrb	r3, [r7, #21]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21b      	sxth	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b21a      	sxth	r2, r3
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <BMP280_etalonnage+0x1a4>)
 800090c:	801a      	strh	r2, [r3, #0]
	dig_P7 = receive_buf[18]|(receive_buf[19]<<8);
 800090e:	7dbb      	ldrb	r3, [r7, #22]
 8000910:	b21a      	sxth	r2, r3
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21b      	sxth	r3, r3
 8000918:	4313      	orrs	r3, r2
 800091a:	b21a      	sxth	r2, r3
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <BMP280_etalonnage+0x1a8>)
 800091e:	801a      	strh	r2, [r3, #0]
	dig_P8 = receive_buf[20]|(receive_buf[21]<<8);
 8000920:	7e3b      	ldrb	r3, [r7, #24]
 8000922:	b21a      	sxth	r2, r3
 8000924:	7e7b      	ldrb	r3, [r7, #25]
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	b21b      	sxth	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b21a      	sxth	r2, r3
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <BMP280_etalonnage+0x1ac>)
 8000930:	801a      	strh	r2, [r3, #0]
	dig_P9 = receive_buf[22]|(receive_buf[23]<<8);
 8000932:	7ebb      	ldrb	r3, [r7, #26]
 8000934:	b21a      	sxth	r2, r3
 8000936:	7efb      	ldrb	r3, [r7, #27]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b21b      	sxth	r3, r3
 800093c:	4313      	orrs	r3, r2
 800093e:	b21a      	sxth	r2, r3
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <BMP280_etalonnage+0x1b0>)
 8000942:	801a      	strh	r2, [r3, #0]
}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000003 	.word	0x20000003
 8000954:	200000d0 	.word	0x200000d0
 8000958:	200000b4 	.word	0x200000b4
 800095c:	08004cac 	.word	0x08004cac
 8000960:	08004d04 	.word	0x08004d04
 8000964:	08004d2c 	.word	0x08004d2c
 8000968:	200000b6 	.word	0x200000b6
 800096c:	200000b8 	.word	0x200000b8
 8000970:	200000ba 	.word	0x200000ba
 8000974:	200000bc 	.word	0x200000bc
 8000978:	200000be 	.word	0x200000be
 800097c:	200000c0 	.word	0x200000c0
 8000980:	200000c2 	.word	0x200000c2
 8000984:	200000c4 	.word	0x200000c4
 8000988:	200000c6 	.word	0x200000c6
 800098c:	200000c8 	.word	0x200000c8
 8000990:	200000ca 	.word	0x200000ca
 8000994:	200000cc 	.word	0x200000cc

08000998 <BMP280_get_temp>:

int BMP280_get_temp(void){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af02      	add	r7, sp, #8

	uint8_t receive_buf[3];
	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, &temp_add, 1, HAL_MAX_DELAY);
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <BMP280_get_temp+0x7c>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b299      	uxth	r1, r3
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2301      	movs	r3, #1
 80009ac:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <BMP280_get_temp+0x80>)
 80009ae:	481b      	ldr	r0, [pc, #108]	; (8000a1c <BMP280_get_temp+0x84>)
 80009b0:	f001 f9a6 	bl	8001d00 <HAL_I2C_Master_Transmit>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <BMP280_get_temp+0x88>)
 80009ba:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <BMP280_get_temp+0x88>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <BMP280_get_temp+0x32>
		printf("Problème avec l'I2C\r\n");
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <BMP280_get_temp+0x8c>)
 80009c6:	f003 fafd 	bl	8003fc4 <puts>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, receive_buf, 3, HAL_MAX_DELAY);
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <BMP280_get_temp+0x7c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b299      	uxth	r1, r3
 80009d0:	463a      	mov	r2, r7
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2303      	movs	r3, #3
 80009da:	4810      	ldr	r0, [pc, #64]	; (8000a1c <BMP280_get_temp+0x84>)
 80009dc:	f001 fa8e 	bl	8001efc <HAL_I2C_Master_Receive>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <BMP280_get_temp+0x88>)
 80009e6:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <BMP280_get_temp+0x88>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <BMP280_get_temp+0x5e>
		printf("Problème avec l'I2C\r\n");
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <BMP280_get_temp+0x8c>)
 80009f2:	f003 fae7 	bl	8003fc4 <puts>
	}
	int nc_temp=receive_buf[0]<<12|receive_buf[1]<<4|receive_buf[2]>>4;
 80009f6:	783b      	ldrb	r3, [r7, #0]
 80009f8:	031a      	lsls	r2, r3, #12
 80009fa:	787b      	ldrb	r3, [r7, #1]
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	4313      	orrs	r3, r2
 8000a00:	78ba      	ldrb	r2, [r7, #2]
 8000a02:	0912      	lsrs	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	4313      	orrs	r3, r2
 8000a08:	607b      	str	r3, [r7, #4]
	return nc_temp;
 8000a0a:	687b      	ldr	r3, [r7, #4]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	200000d0 	.word	0x200000d0
 8000a20:	200000b4 	.word	0x200000b4
 8000a24:	08004cac 	.word	0x08004cac

08000a28 <BMP280_get_pres>:

int BMP280_get_pres(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af02      	add	r7, sp, #8

	uint8_t receive_buf[3];
	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, &pres_add, 1, HAL_MAX_DELAY);
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <BMP280_get_pres+0x7c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b299      	uxth	r1, r3
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <BMP280_get_pres+0x80>)
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <BMP280_get_pres+0x84>)
 8000a40:	f001 f95e 	bl	8001d00 <HAL_I2C_Master_Transmit>
 8000a44:	4603      	mov	r3, r0
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <BMP280_get_pres+0x88>)
 8000a4a:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <BMP280_get_pres+0x88>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <BMP280_get_pres+0x32>
		printf("Problème avec l'I2C\r\n");
 8000a54:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <BMP280_get_pres+0x8c>)
 8000a56:	f003 fab5 	bl	8003fc4 <puts>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, receive_buf, 3, HAL_MAX_DELAY);
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <BMP280_get_pres+0x7c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b299      	uxth	r1, r3
 8000a60:	463a      	mov	r2, r7
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2303      	movs	r3, #3
 8000a6a:	4810      	ldr	r0, [pc, #64]	; (8000aac <BMP280_get_pres+0x84>)
 8000a6c:	f001 fa46 	bl	8001efc <HAL_I2C_Master_Receive>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <BMP280_get_pres+0x88>)
 8000a76:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <BMP280_get_pres+0x88>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <BMP280_get_pres+0x5e>
		printf("Problème avec l'I2C\r\n");
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <BMP280_get_pres+0x8c>)
 8000a82:	f003 fa9f 	bl	8003fc4 <puts>
	}
	int nc_pres=receive_buf[0]<<12|receive_buf[1]<<4|receive_buf[2]>>4;
 8000a86:	783b      	ldrb	r3, [r7, #0]
 8000a88:	031a      	lsls	r2, r3, #12
 8000a8a:	787b      	ldrb	r3, [r7, #1]
 8000a8c:	011b      	lsls	r3, r3, #4
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	78ba      	ldrb	r2, [r7, #2]
 8000a92:	0912      	lsrs	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	4313      	orrs	r3, r2
 8000a98:	607b      	str	r3, [r7, #4]
	return nc_pres;
 8000a9a:	687b      	ldr	r3, [r7, #4]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000005 	.word	0x20000005
 8000aac:	200000d0 	.word	0x200000d0
 8000ab0:	200000b4 	.word	0x200000b4
 8000ab4:	08004cac 	.word	0x08004cac

08000ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a2c      	ldr	r2, [pc, #176]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a25      	ldr	r2, [pc, #148]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2120      	movs	r1, #32
 8000b42:	4812      	ldr	r0, [pc, #72]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000b44:	f000 ff7e 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_GPIO_Init+0xd8>)
 8000b60:	f000 fddc 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b64:	2320      	movs	r3, #32
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_GPIO_Init+0xd4>)
 8000b7c:	f000 fdce 	bl	800171c <HAL_GPIO_Init>

}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020800 	.word	0x40020800

08000b94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <MX_I2C1_Init+0x54>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000ba0:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_I2C1_Init+0x58>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bd2:	f000 ff51 	bl	8001a78 <HAL_I2C_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bdc:	f000 f90c 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000d0 	.word	0x200000d0
 8000be8:	40005400 	.word	0x40005400
 8000bec:	000186a0 	.word	0x000186a0

08000bf0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_I2C_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12c      	bne.n	8000c6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_I2C_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_I2C_MspInit+0x88>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_I2C_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	2312      	movs	r3, #18
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c40:	2304      	movs	r3, #4
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <HAL_I2C_MspInit+0x8c>)
 8000c4c:	f000 fd66 	bl	800171c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_I2C_MspInit+0x88>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_I2C_MspInit+0x88>)
 8000c5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_I2C_MspInit+0x88>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40005400 	.word	0x40005400
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020400 	.word	0x40020400

08000c80 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c84:	f000 fad2 	bl	800122c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c88:	f000 f844 	bl	8000d14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c8c:	f7ff ff14 	bl	8000ab8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c90:	f000 f9fc 	bl	800108c <MX_USART2_UART_Init>
	MX_CAN1_Init();
 8000c94:	f7ff fc8a 	bl	80005ac <MX_CAN1_Init>
	MX_I2C1_Init();
 8000c98:	f7ff ff7c 	bl	8000b94 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000c9c:	f000 f9cc 	bl	8001038 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	if(checkID()==0){
 8000ca0:	f7ff fd00 	bl	80006a4 <checkID>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <main+0x30>
		printf("Connection réussie\r\n");
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <main+0x7c>)
 8000cac:	f003 f98a 	bl	8003fc4 <puts>
	}

	if(BMP280_config()==0){
 8000cb0:	f7ff fd42 	bl	8000738 <BMP280_config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <main+0x40>
		printf("Configuration réussie\r\n");
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <main+0x80>)
 8000cbc:	f003 f982 	bl	8003fc4 <puts>
	}
	BMP280_etalonnage();
 8000cc0:	f7ff fd90 	bl	80007e4 <BMP280_etalonnage>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//printf("ALED\n\r");
		nc_temp = BMP280_get_temp();
 8000cc4:	f7ff fe68 	bl	8000998 <BMP280_get_temp>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <main+0x84>)
 8000ccc:	6013      	str	r3, [r2, #0]
		nc_pres = BMP280_get_pres();
 8000cce:	f7ff feab 	bl	8000a28 <BMP280_get_pres>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <main+0x88>)
 8000cd6:	6013      	str	r3, [r2, #0]
		printf("Température non compensée = %x\r\n",nc_temp);
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <main+0x84>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <main+0x8c>)
 8000ce0:	f003 f90a 	bl	8003ef8 <iprintf>
		printf("Pression non compensée = %x\r\n",nc_pres);
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <main+0x88>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <main+0x90>)
 8000cec:	f003 f904 	bl	8003ef8 <iprintf>
		HAL_Delay(500);
 8000cf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf4:	f000 fb0c 	bl	8001310 <HAL_Delay>
		nc_temp = BMP280_get_temp();
 8000cf8:	e7e4      	b.n	8000cc4 <main+0x44>
 8000cfa:	bf00      	nop
 8000cfc:	08004d40 	.word	0x08004d40
 8000d00:	08004d58 	.word	0x08004d58
 8000d04:	20000124 	.word	0x20000124
 8000d08:	20000128 	.word	0x20000128
 8000d0c:	08004d70 	.word	0x08004d70
 8000d10:	08004d94 	.word	0x08004d94

08000d14 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b094      	sub	sp, #80	; 0x50
 8000d18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	2234      	movs	r2, #52	; 0x34
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fa2e 	bl	8004184 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <SystemClock_Config+0xdc>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <SystemClock_Config+0xdc>)
 8000d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <SystemClock_Config+0xdc>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <SystemClock_Config+0xe0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <SystemClock_Config+0xe0>)
 8000d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <SystemClock_Config+0xe0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d78:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d84:	2304      	movs	r3, #4
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000d88:	23b4      	movs	r3, #180	; 0xb4
 8000d8a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f99b 	bl	80030d8 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000da8:	f000 f826 	bl	8000df8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dac:	f001 fdfa 	bl	80029a4 <HAL_PWREx_EnableOverDrive>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000db6:	f000 f81f 	bl	8000df8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dba:	230f      	movs	r3, #15
 8000dbc:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2105      	movs	r1, #5
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fe33 	bl	8002a44 <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000de4:	f000 f808 	bl	8000df8 <Error_Handler>
	}
}
 8000de8:	bf00      	nop
 8000dea:	3750      	adds	r7, #80	; 0x50
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40007000 	.word	0x40007000

08000df8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e42:	2007      	movs	r0, #7
 8000e44:	f000 fc36 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800

08000e54 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000e5c:	1d39      	adds	r1, r7, #4
 8000e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e62:	2201      	movs	r2, #1
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <__io_putchar+0x20>)
 8000e66:	f002 fc22 	bl	80036ae <HAL_UART_Transmit>

	return ch;
 8000e6a:	687b      	ldr	r3, [r7, #4]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000174 	.word	0x20000174

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 fa04 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e00a      	b.n	8000ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ede:	f3af 8000 	nop.w
 8000ee2:	4601      	mov	r1, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf0      	blt.n	8000ede <_read+0x12>
  }

  return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e009      	b.n	8000f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff97 	bl	8000e54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbf1      	blt.n	8000f18 <_write+0x12>
  }
  return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_close>:

int _close(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f66:	605a      	str	r2, [r3, #4]
  return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_isatty>:

int _isatty(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f003 f922 	bl	8004220 <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20020000 	.word	0x20020000
 8001008:	00000400 	.word	0x00000400
 800100c:	2000012c 	.word	0x2000012c
 8001010:	20000308 	.word	0x20000308

08001014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART1_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_USART1_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USART1_UART_Init+0x4c>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART1_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART1_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART1_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART1_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART1_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART1_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART1_UART_Init+0x4c>)
 8001070:	f002 fad0 	bl	8003614 <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f7ff febd 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000130 	.word	0x20000130
 8001088:	40011000 	.word	0x40011000

0800108c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_USART2_UART_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 8001098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800109c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010c4:	f002 faa6 	bl	8003614 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ce:	f7ff fe93 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000174 	.word	0x20000174
 80010dc:	40004400 	.word	0x40004400

080010e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <HAL_UART_MspInit+0xe8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d12d      	bne.n	800115e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <HAL_UART_MspInit+0xec>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a30      	ldr	r2, [pc, #192]	; (80011cc <HAL_UART_MspInit+0xec>)
 800110c:	f043 0310 	orr.w	r3, r3, #16
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_UART_MspInit+0xec>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <HAL_UART_MspInit+0xec>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a29      	ldr	r2, [pc, #164]	; (80011cc <HAL_UART_MspInit+0xec>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_UART_MspInit+0xec>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800113a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800114c:	2307      	movs	r3, #7
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	481e      	ldr	r0, [pc, #120]	; (80011d0 <HAL_UART_MspInit+0xf0>)
 8001158:	f000 fae0 	bl	800171c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800115c:	e030      	b.n	80011c0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <HAL_UART_MspInit+0xf4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d12b      	bne.n	80011c0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_UART_MspInit+0xec>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a16      	ldr	r2, [pc, #88]	; (80011cc <HAL_UART_MspInit+0xec>)
 8001172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_UART_MspInit+0xec>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_UART_MspInit+0xec>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_UART_MspInit+0xec>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_UART_MspInit+0xec>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011a0:	230c      	movs	r3, #12
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b0:	2307      	movs	r3, #7
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_UART_MspInit+0xf0>)
 80011bc:	f000 faae 	bl	800171c <HAL_GPIO_Init>
}
 80011c0:	bf00      	nop
 80011c2:	3730      	adds	r7, #48	; 0x30
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40004400 	.word	0x40004400

080011d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f4:	4c0b      	ldr	r4, [pc, #44]	; (8001224 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001202:	f7ff ff07 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001206:	f003 f811 	bl	800422c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120a:	f7ff fd39 	bl	8000c80 <main>
  bx  lr    
 800120e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800121c:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8001220:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001224:	20000308 	.word	0x20000308

08001228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC_IRQHandler>
	...

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <HAL_Init+0x40>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_Init+0x40>)
 8001242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_Init+0x40>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 fa2d 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fdd0 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023c00 	.word	0x40023c00

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fa37 	bl	8001702 <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 fa0d 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000010 	.word	0x20000010
 80012cc:	2000000c 	.word	0x2000000c

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000010 	.word	0x20000010
 80012f4:	200001b8 	.word	0x200001b8

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200001b8 	.word	0x200001b8

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff ffee 	bl	80012f8 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d005      	beq.n	8001336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_Delay+0x44>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001336:	bf00      	nop
 8001338:	f7ff ffde 	bl	80012f8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8f7      	bhi.n	8001338 <HAL_Delay+0x28>
  {
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000010 	.word	0x20000010

08001358 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0ed      	b.n	8001546 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff f94c 	bl	8000614 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800138c:	f7ff ffb4 	bl	80012f8 <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001392:	e012      	b.n	80013ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001394:	f7ff ffb0 	bl	80012f8 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b0a      	cmp	r3, #10
 80013a0:	d90b      	bls.n	80013ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2205      	movs	r2, #5
 80013b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0c5      	b.n	8001546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0e5      	beq.n	8001394 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0202 	bic.w	r2, r2, #2
 80013d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d8:	f7ff ff8e 	bl	80012f8 <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013de:	e012      	b.n	8001406 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013e0:	f7ff ff8a 	bl	80012f8 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b0a      	cmp	r3, #10
 80013ec:	d90b      	bls.n	8001406 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2205      	movs	r2, #5
 80013fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e09f      	b.n	8001546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e5      	bne.n	80013e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e1b      	ldrb	r3, [r3, #24]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d108      	bne.n	800142e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e007      	b.n	800143e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7e5b      	ldrb	r3, [r3, #25]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d108      	bne.n	8001458 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e007      	b.n	8001468 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001466:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7e9b      	ldrb	r3, [r3, #26]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d108      	bne.n	8001482 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0220 	orr.w	r2, r2, #32
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e007      	b.n	8001492 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0220 	bic.w	r2, r2, #32
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7edb      	ldrb	r3, [r3, #27]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d108      	bne.n	80014ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0210 	bic.w	r2, r2, #16
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e007      	b.n	80014bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0210 	orr.w	r2, r2, #16
 80014ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7f1b      	ldrb	r3, [r3, #28]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d108      	bne.n	80014d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0208 	orr.w	r2, r2, #8
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e007      	b.n	80014e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0208 	bic.w	r2, r2, #8
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7f5b      	ldrb	r3, [r3, #29]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0204 	orr.w	r2, r2, #4
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e007      	b.n	8001510 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0204 	bic.w	r2, r2, #4
 800150e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	ea42 0103 	orr.w	r1, r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001582:	4a04      	ldr	r2, [pc, #16]	; (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	60d3      	str	r3, [r2, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff8e 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff47 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff5c 	bl	8001598 <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff8e 	bl	8001608 <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5d 	bl	80015b4 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffb0 	bl	8001670 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e165      	b.n	8001a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8154 	bne.w	80019fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d005      	beq.n	800176e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	2b02      	cmp	r3, #2
 800176c:	d130      	bne.n	80017d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 0201 	and.w	r2, r3, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d017      	beq.n	800180c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d123      	bne.n	8001860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80ae 	beq.w	80019fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_GPIO_Init+0x300>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a5c      	ldr	r2, [pc, #368]	; (8001a1c <HAL_GPIO_Init+0x300>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <HAL_GPIO_Init+0x300>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018be:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <HAL_GPIO_Init+0x308>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d025      	beq.n	8001936 <HAL_GPIO_Init+0x21a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4e      	ldr	r2, [pc, #312]	; (8001a28 <HAL_GPIO_Init+0x30c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x216>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4d      	ldr	r2, [pc, #308]	; (8001a2c <HAL_GPIO_Init+0x310>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x212>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <HAL_GPIO_Init+0x314>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x20e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4b      	ldr	r2, [pc, #300]	; (8001a34 <HAL_GPIO_Init+0x318>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x20a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4a      	ldr	r2, [pc, #296]	; (8001a38 <HAL_GPIO_Init+0x31c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x206>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a49      	ldr	r2, [pc, #292]	; (8001a3c <HAL_GPIO_Init+0x320>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x202>
 800191a:	2306      	movs	r3, #6
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 800191e:	2307      	movs	r3, #7
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 8001936:	2300      	movs	r3, #0
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	4093      	lsls	r3, r2
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001948:	4935      	ldr	r1, [pc, #212]	; (8001a20 <HAL_GPIO_Init+0x304>)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001956:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_GPIO_Init+0x324>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197a:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <HAL_GPIO_Init+0x324>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <HAL_GPIO_Init+0x324>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a4:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ce:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f8:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	f67f ae96 	bls.w	8001738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40013800 	.word	0x40013800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40021400 	.word	0x40021400
 8001a3c:	40021800 	.word	0x40021800
 8001a40:	40013c00 	.word	0x40013c00

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a60:	e003      	b.n	8001a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	041a      	lsls	r2, r3, #16
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	619a      	str	r2, [r3, #24]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e12b      	b.n	8001ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff f8a6 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2224      	movs	r2, #36	; 0x24
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0201 	bic.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001adc:	f001 f8a4 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 8001ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4a81      	ldr	r2, [pc, #516]	; (8001cec <HAL_I2C_Init+0x274>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d807      	bhi.n	8001afc <HAL_I2C_Init+0x84>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4a80      	ldr	r2, [pc, #512]	; (8001cf0 <HAL_I2C_Init+0x278>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bf94      	ite	ls
 8001af4:	2301      	movls	r3, #1
 8001af6:	2300      	movhi	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e006      	b.n	8001b0a <HAL_I2C_Init+0x92>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4a7d      	ldr	r2, [pc, #500]	; (8001cf4 <HAL_I2C_Init+0x27c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	bf94      	ite	ls
 8001b04:	2301      	movls	r3, #1
 8001b06:	2300      	movhi	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0e7      	b.n	8001ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4a78      	ldr	r2, [pc, #480]	; (8001cf8 <HAL_I2C_Init+0x280>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0c9b      	lsrs	r3, r3, #18
 8001b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a6a      	ldr	r2, [pc, #424]	; (8001cec <HAL_I2C_Init+0x274>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d802      	bhi.n	8001b4c <HAL_I2C_Init+0xd4>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	e009      	b.n	8001b60 <HAL_I2C_Init+0xe8>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	4a69      	ldr	r2, [pc, #420]	; (8001cfc <HAL_I2C_Init+0x284>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	3301      	adds	r3, #1
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	495c      	ldr	r1, [pc, #368]	; (8001cec <HAL_I2C_Init+0x274>)
 8001b7c:	428b      	cmp	r3, r1
 8001b7e:	d819      	bhi.n	8001bb4 <HAL_I2C_Init+0x13c>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1e59      	subs	r1, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b8e:	1c59      	adds	r1, r3, #1
 8001b90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b94:	400b      	ands	r3, r1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00a      	beq.n	8001bb0 <HAL_I2C_Init+0x138>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1e59      	subs	r1, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bae:	e051      	b.n	8001c54 <HAL_I2C_Init+0x1dc>
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	e04f      	b.n	8001c54 <HAL_I2C_Init+0x1dc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d111      	bne.n	8001be0 <HAL_I2C_Init+0x168>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	440b      	add	r3, r1
 8001bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e012      	b.n	8001c06 <HAL_I2C_Init+0x18e>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1e58      	subs	r0, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	0099      	lsls	r1, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_Init+0x196>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e022      	b.n	8001c54 <HAL_I2C_Init+0x1dc>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10e      	bne.n	8001c34 <HAL_I2C_Init+0x1bc>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1e58      	subs	r0, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	440b      	add	r3, r1
 8001c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c32:	e00f      	b.n	8001c54 <HAL_I2C_Init+0x1dc>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1e58      	subs	r0, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	0099      	lsls	r1, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	6809      	ldr	r1, [r1, #0]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6911      	ldr	r1, [r2, #16]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68d2      	ldr	r2, [r2, #12]
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	000186a0 	.word	0x000186a0
 8001cf0:	001e847f 	.word	0x001e847f
 8001cf4:	003d08ff 	.word	0x003d08ff
 8001cf8:	431bde83 	.word	0x431bde83
 8001cfc:	10624dd3 	.word	0x10624dd3

08001d00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	817b      	strh	r3, [r7, #10]
 8001d10:	4613      	mov	r3, r2
 8001d12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff faf0 	bl	80012f8 <HAL_GetTick>
 8001d18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	f040 80e0 	bne.w	8001ee8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2319      	movs	r3, #25
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4970      	ldr	r1, [pc, #448]	; (8001ef4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 fc58 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e0d3      	b.n	8001eea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_I2C_Master_Transmit+0x50>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e0cc      	b.n	8001eea <HAL_I2C_Master_Transmit+0x1ea>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d007      	beq.n	8001d76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2221      	movs	r2, #33	; 0x21
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2210      	movs	r2, #16
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	893a      	ldrh	r2, [r7, #8]
 8001da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4a50      	ldr	r2, [pc, #320]	; (8001ef8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001db8:	8979      	ldrh	r1, [r7, #10]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	6a3a      	ldr	r2, [r7, #32]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 fac2 	bl	8002348 <I2C_MasterRequestWrite>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e08d      	b.n	8001eea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001de4:	e066      	b.n	8001eb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fcd2 	bl	8002794 <I2C_WaitOnTXEFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00d      	beq.n	8001e12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d107      	bne.n	8001e0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06b      	b.n	8001eea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d11b      	bne.n	8001e88 <HAL_I2C_Master_Transmit+0x188>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d017      	beq.n	8001e88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	6a39      	ldr	r1, [r7, #32]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fcc2 	bl	8002816 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00d      	beq.n	8001eb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d107      	bne.n	8001eb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e01a      	b.n	8001eea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d194      	bne.n	8001de6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ee8:	2302      	movs	r3, #2
  }
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	00100002 	.word	0x00100002
 8001ef8:	ffff0000 	.word	0xffff0000

08001efc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	461a      	mov	r2, r3
 8001f08:	460b      	mov	r3, r1
 8001f0a:	817b      	strh	r3, [r7, #10]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff f9f2 	bl	80012f8 <HAL_GetTick>
 8001f14:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	f040 820b 	bne.w	800233a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2319      	movs	r3, #25
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	497c      	ldr	r1, [pc, #496]	; (8002120 <HAL_I2C_Master_Receive+0x224>)
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fb5a 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e1fe      	b.n	800233c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_I2C_Master_Receive+0x50>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e1f7      	b.n	800233c <HAL_I2C_Master_Receive+0x440>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d007      	beq.n	8001f72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2222      	movs	r2, #34	; 0x22
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a5c      	ldr	r2, [pc, #368]	; (8002124 <HAL_I2C_Master_Receive+0x228>)
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fb4:	8979      	ldrh	r1, [r7, #10]
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fa46 	bl	800244c <I2C_MasterRequestRead>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1b8      	b.n	800233c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d113      	bne.n	8001ffa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	623b      	str	r3, [r7, #32]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	623b      	str	r3, [r7, #32]
 8001fe6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e18c      	b.n	8002314 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d11b      	bne.n	800203a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e16c      	b.n	8002314 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	2b02      	cmp	r3, #2
 8002040:	d11b      	bne.n	800207a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002050:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	e14c      	b.n	8002314 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020a0:	e138      	b.n	8002314 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	f200 80f1 	bhi.w	800228e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d123      	bne.n	80020fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fbed 	bl	8002898 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e139      	b.n	800233c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020fa:	e10b      	b.n	8002314 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	2b02      	cmp	r3, #2
 8002102:	d14e      	bne.n	80021a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	2200      	movs	r2, #0
 800210c:	4906      	ldr	r1, [pc, #24]	; (8002128 <HAL_I2C_Master_Receive+0x22c>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa6a 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e10e      	b.n	800233c <HAL_I2C_Master_Receive+0x440>
 800211e:	bf00      	nop
 8002120:	00100002 	.word	0x00100002
 8002124:	ffff0000 	.word	0xffff0000
 8002128:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021a0:	e0b8      	b.n	8002314 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	2200      	movs	r2, #0
 80021aa:	4966      	ldr	r1, [pc, #408]	; (8002344 <HAL_I2C_Master_Receive+0x448>)
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fa1b 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0bf      	b.n	800233c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002204:	2200      	movs	r2, #0
 8002206:	494f      	ldr	r1, [pc, #316]	; (8002344 <HAL_I2C_Master_Receive+0x448>)
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f9ed 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e091      	b.n	800233c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800228c:	e042      	b.n	8002314 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fb00 	bl	8002898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e04c      	b.n	800233c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d118      	bne.n	8002314 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002318:	2b00      	cmp	r3, #0
 800231a:	f47f aec2 	bne.w	80020a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3728      	adds	r7, #40	; 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	00010004 	.word	0x00010004

08002348 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	460b      	mov	r3, r1
 8002356:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b08      	cmp	r3, #8
 8002362:	d006      	beq.n	8002372 <I2C_MasterRequestWrite+0x2a>
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d003      	beq.n	8002372 <I2C_MasterRequestWrite+0x2a>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002370:	d108      	bne.n	8002384 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e00b      	b.n	800239c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	2b12      	cmp	r3, #18
 800238a:	d107      	bne.n	800239c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800239a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f91d 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c2:	d103      	bne.n	80023cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e035      	b.n	800243c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023d8:	d108      	bne.n	80023ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023e8:	611a      	str	r2, [r3, #16]
 80023ea:	e01b      	b.n	8002424 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023ec:	897b      	ldrh	r3, [r7, #10]
 80023ee:	11db      	asrs	r3, r3, #7
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 0306 	and.w	r3, r3, #6
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f063 030f 	orn	r3, r3, #15
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	490e      	ldr	r1, [pc, #56]	; (8002444 <I2C_MasterRequestWrite+0xfc>)
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f943 	bl	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e010      	b.n	800243c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800241a:	897b      	ldrh	r3, [r7, #10]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <I2C_MasterRequestWrite+0x100>)
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f933 	bl	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	00010008 	.word	0x00010008
 8002448:	00010002 	.word	0x00010002

0800244c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	460b      	mov	r3, r1
 800245a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002470:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d006      	beq.n	8002486 <I2C_MasterRequestRead+0x3a>
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d003      	beq.n	8002486 <I2C_MasterRequestRead+0x3a>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002484:	d108      	bne.n	8002498 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e00b      	b.n	80024b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	2b11      	cmp	r3, #17
 800249e:	d107      	bne.n	80024b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f893 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d6:	d103      	bne.n	80024e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e079      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ec:	d108      	bne.n	8002500 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	611a      	str	r2, [r3, #16]
 80024fe:	e05f      	b.n	80025c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002500:	897b      	ldrh	r3, [r7, #10]
 8002502:	11db      	asrs	r3, r3, #7
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0306 	and.w	r3, r3, #6
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f063 030f 	orn	r3, r3, #15
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4930      	ldr	r1, [pc, #192]	; (80025e0 <I2C_MasterRequestRead+0x194>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f8b9 	bl	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e054      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800252e:	897b      	ldrh	r3, [r7, #10]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4929      	ldr	r1, [pc, #164]	; (80025e4 <I2C_MasterRequestRead+0x198>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f8a9 	bl	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e044      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002572:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f831 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00d      	beq.n	80025a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259a:	d103      	bne.n	80025a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e017      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025a8:	897b      	ldrh	r3, [r7, #10]
 80025aa:	11db      	asrs	r3, r3, #7
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f003 0306 	and.w	r3, r3, #6
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f063 030e 	orn	r3, r3, #14
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4907      	ldr	r1, [pc, #28]	; (80025e4 <I2C_MasterRequestRead+0x198>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f865 	bl	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	00010008 	.word	0x00010008
 80025e4:	00010002 	.word	0x00010002

080025e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f8:	e025      	b.n	8002646 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d021      	beq.n	8002646 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002602:	f7fe fe79 	bl	80012f8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d302      	bcc.n	8002618 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d116      	bne.n	8002646 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f043 0220 	orr.w	r2, r3, #32
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e023      	b.n	800268e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10d      	bne.n	800266c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4013      	ands	r3, r2
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	e00c      	b.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4013      	ands	r3, r2
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf0c      	ite	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	2300      	movne	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	429a      	cmp	r2, r3
 800268a:	d0b6      	beq.n	80025fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026a4:	e051      	b.n	800274a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d123      	bne.n	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f043 0204 	orr.w	r2, r3, #4
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e046      	b.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d021      	beq.n	800274a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7fe fdf7 	bl	80012f8 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d116      	bne.n	800274a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f043 0220 	orr.w	r2, r3, #32
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e020      	b.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d10c      	bne.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	e00b      	b.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	43da      	mvns	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4013      	ands	r3, r2
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d18d      	bne.n	80026a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a0:	e02d      	b.n	80027fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f8ce 	bl	8002944 <I2C_IsAcknowledgeFailed>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e02d      	b.n	800280e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d021      	beq.n	80027fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ba:	f7fe fd9d 	bl	80012f8 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d302      	bcc.n	80027d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d116      	bne.n	80027fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e007      	b.n	800280e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d1ca      	bne.n	80027a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002822:	e02d      	b.n	8002880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f88d 	bl	8002944 <I2C_IsAcknowledgeFailed>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e02d      	b.n	8002890 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d021      	beq.n	8002880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283c:	f7fe fd5c 	bl	80012f8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	429a      	cmp	r2, r3
 800284a:	d302      	bcc.n	8002852 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e007      	b.n	8002890 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d1ca      	bne.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028a4:	e042      	b.n	800292c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d119      	bne.n	80028e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0210 	mvn.w	r2, #16
 80028bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e029      	b.n	800293c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e8:	f7fe fd06 	bl	80012f8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d116      	bne.n	800292c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f043 0220 	orr.w	r2, r3, #32
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e007      	b.n	800293c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d1b5      	bne.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295a:	d11b      	bne.n	8002994 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002964:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f043 0204 	orr.w	r2, r3, #4
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_PWREx_EnableOverDrive+0x90>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <HAL_PWREx_EnableOverDrive+0x90>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_PWREx_EnableOverDrive+0x90>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x94>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d0:	f7fe fc92 	bl	80012f8 <HAL_GetTick>
 80029d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029d6:	e009      	b.n	80029ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029d8:	f7fe fc8e 	bl	80012f8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e6:	d901      	bls.n	80029ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e01f      	b.n	8002a2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_PWREx_EnableOverDrive+0x98>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f8:	d1ee      	bne.n	80029d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a00:	f7fe fc7a 	bl	80012f8 <HAL_GetTick>
 8002a04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a06:	e009      	b.n	8002a1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a08:	f7fe fc76 	bl	80012f8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a16:	d901      	bls.n	8002a1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e007      	b.n	8002a2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a28:	d1ee      	bne.n	8002a08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	420e0040 	.word	0x420e0040
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	420e0044 	.word	0x420e0044

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0cc      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b68      	ldr	r3, [pc, #416]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d90c      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b65      	ldr	r3, [pc, #404]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d044      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d119      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e06f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e067      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4934      	ldr	r1, [pc, #208]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7fe fbe0 	bl	80012f8 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7fe fbdc 	bl	80012f8 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e04f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d20c      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f855 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490a      	ldr	r1, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fb40 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	08004db4 	.word	0x08004db4
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	2000000c 	.word	0x2000000c

08002c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000008 	.word	0x20000008

08002c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c2c:	f7ff fff0 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	0a9b      	lsrs	r3, r3, #10
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4903      	ldr	r1, [pc, #12]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08004dc4 	.word	0x08004dc4

08002c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c54:	f7ff ffdc 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	0b5b      	lsrs	r3, r3, #13
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	08004dc4 	.word	0x08004dc4

08002c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c7c:	b0ae      	sub	sp, #184	; 0xb8
 8002c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c9e:	4bcb      	ldr	r3, [pc, #812]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	f200 8206 	bhi.w	80030b8 <HAL_RCC_GetSysClockFreq+0x440>
 8002cac:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	080030b9 	.word	0x080030b9
 8002cbc:	080030b9 	.word	0x080030b9
 8002cc0:	080030b9 	.word	0x080030b9
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	080030b9 	.word	0x080030b9
 8002ccc:	080030b9 	.word	0x080030b9
 8002cd0:	080030b9 	.word	0x080030b9
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	080030b9 	.word	0x080030b9
 8002cdc:	080030b9 	.word	0x080030b9
 8002ce0:	080030b9 	.word	0x080030b9
 8002ce4:	08002ee9 	.word	0x08002ee9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4bb9      	ldr	r3, [pc, #740]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cee:	e1e7      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf0:	4bb8      	ldr	r3, [pc, #736]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cf6:	e1e3      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4bb4      	ldr	r3, [pc, #720]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d04:	4bb1      	ldr	r3, [pc, #708]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d071      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d10:	4bae      	ldr	r3, [pc, #696]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d1c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	f04f 0000 	mov.w	r0, #0
 8002d3e:	f04f 0100 	mov.w	r1, #0
 8002d42:	0159      	lsls	r1, r3, #5
 8002d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d48:	0150      	lsls	r0, r2, #5
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4621      	mov	r1, r4
 8002d50:	1a51      	subs	r1, r2, r1
 8002d52:	6439      	str	r1, [r7, #64]	; 0x40
 8002d54:	4629      	mov	r1, r5
 8002d56:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d68:	4649      	mov	r1, r9
 8002d6a:	018b      	lsls	r3, r1, #6
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d72:	4641      	mov	r1, r8
 8002d74:	018a      	lsls	r2, r1, #6
 8002d76:	4641      	mov	r1, r8
 8002d78:	1a51      	subs	r1, r2, r1
 8002d7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d90:	4649      	mov	r1, r9
 8002d92:	00cb      	lsls	r3, r1, #3
 8002d94:	4641      	mov	r1, r8
 8002d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d9a:	4641      	mov	r1, r8
 8002d9c:	00ca      	lsls	r2, r1, #3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	4622      	mov	r2, r4
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
 8002daa:	462b      	mov	r3, r5
 8002dac:	460a      	mov	r2, r1
 8002dae:	eb42 0303 	adc.w	r3, r2, r3
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	024b      	lsls	r3, r1, #9
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dca:	4621      	mov	r1, r4
 8002dcc:	024a      	lsls	r2, r1, #9
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ddc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002de0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002de4:	f7fd fa64 	bl	80002b0 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4613      	mov	r3, r2
 8002dee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df2:	e067      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df4:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e00:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e0e:	2300      	movs	r3, #0
 8002e10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e16:	4622      	mov	r2, r4
 8002e18:	462b      	mov	r3, r5
 8002e1a:	f04f 0000 	mov.w	r0, #0
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	0159      	lsls	r1, r3, #5
 8002e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e28:	0150      	lsls	r0, r2, #5
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4621      	mov	r1, r4
 8002e30:	1a51      	subs	r1, r2, r1
 8002e32:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e34:	4629      	mov	r1, r5
 8002e36:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e48:	4649      	mov	r1, r9
 8002e4a:	018b      	lsls	r3, r1, #6
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e52:	4641      	mov	r1, r8
 8002e54:	018a      	lsls	r2, r1, #6
 8002e56:	4641      	mov	r1, r8
 8002e58:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e76:	4692      	mov	sl, r2
 8002e78:	469b      	mov	fp, r3
 8002e7a:	4623      	mov	r3, r4
 8002e7c:	eb1a 0303 	adds.w	r3, sl, r3
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	462b      	mov	r3, r5
 8002e84:	eb4b 0303 	adc.w	r3, fp, r3
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e96:	4629      	mov	r1, r5
 8002e98:	028b      	lsls	r3, r1, #10
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	028a      	lsls	r2, r1, #10
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eac:	2200      	movs	r2, #0
 8002eae:	673b      	str	r3, [r7, #112]	; 0x70
 8002eb0:	677a      	str	r2, [r7, #116]	; 0x74
 8002eb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002eb6:	f7fd f9fb 	bl	80002b0 <__aeabi_uldivmod>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec4:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ee6:	e0eb      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef4:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d06b      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f00:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	2200      	movs	r2, #0
 8002f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	663b      	str	r3, [r7, #96]	; 0x60
 8002f14:	2300      	movs	r3, #0
 8002f16:	667b      	str	r3, [r7, #100]	; 0x64
 8002f18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f1c:	4622      	mov	r2, r4
 8002f1e:	462b      	mov	r3, r5
 8002f20:	f04f 0000 	mov.w	r0, #0
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	0159      	lsls	r1, r3, #5
 8002f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f2e:	0150      	lsls	r0, r2, #5
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4621      	mov	r1, r4
 8002f36:	1a51      	subs	r1, r2, r1
 8002f38:	61b9      	str	r1, [r7, #24]
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f4e:	4659      	mov	r1, fp
 8002f50:	018b      	lsls	r3, r1, #6
 8002f52:	4651      	mov	r1, sl
 8002f54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f58:	4651      	mov	r1, sl
 8002f5a:	018a      	lsls	r2, r1, #6
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ebb2 0801 	subs.w	r8, r2, r1
 8002f62:	4659      	mov	r1, fp
 8002f64:	eb63 0901 	sbc.w	r9, r3, r1
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7c:	4690      	mov	r8, r2
 8002f7e:	4699      	mov	r9, r3
 8002f80:	4623      	mov	r3, r4
 8002f82:	eb18 0303 	adds.w	r3, r8, r3
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	462b      	mov	r3, r5
 8002f8a:	eb49 0303 	adc.w	r3, r9, r3
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	024b      	lsls	r3, r1, #9
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	024a      	lsls	r2, r1, #9
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fb6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fbc:	f7fd f978 	bl	80002b0 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fca:	e065      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x420>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd8:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fe8:	653b      	str	r3, [r7, #80]	; 0x50
 8002fea:	2300      	movs	r3, #0
 8002fec:	657b      	str	r3, [r7, #84]	; 0x54
 8002fee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ff2:	4642      	mov	r2, r8
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	f04f 0000 	mov.w	r0, #0
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	0159      	lsls	r1, r3, #5
 8003000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003004:	0150      	lsls	r0, r2, #5
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4641      	mov	r1, r8
 800300c:	1a51      	subs	r1, r2, r1
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	4649      	mov	r1, r9
 8003012:	eb63 0301 	sbc.w	r3, r3, r1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003024:	4659      	mov	r1, fp
 8003026:	018b      	lsls	r3, r1, #6
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800302e:	4651      	mov	r1, sl
 8003030:	018a      	lsls	r2, r1, #6
 8003032:	4651      	mov	r1, sl
 8003034:	1a54      	subs	r4, r2, r1
 8003036:	4659      	mov	r1, fp
 8003038:	eb63 0501 	sbc.w	r5, r3, r1
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	00eb      	lsls	r3, r5, #3
 8003046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304a:	00e2      	lsls	r2, r4, #3
 800304c:	4614      	mov	r4, r2
 800304e:	461d      	mov	r5, r3
 8003050:	4643      	mov	r3, r8
 8003052:	18e3      	adds	r3, r4, r3
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	464b      	mov	r3, r9
 8003058:	eb45 0303 	adc.w	r3, r5, r3
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003080:	2200      	movs	r2, #0
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
 8003084:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003086:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800308a:	f7fd f911 	bl	80002b0 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4613      	mov	r3, r2
 8003094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0f1b      	lsrs	r3, r3, #28
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80030a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030b6:	e003      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80030ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	37b8      	adds	r7, #184	; 0xb8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	00f42400 	.word	0x00f42400

080030d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e28d      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8083 	beq.w	80031fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030f8:	4b94      	ldr	r3, [pc, #592]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b04      	cmp	r3, #4
 8003102:	d019      	beq.n	8003138 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003104:	4b91      	ldr	r3, [pc, #580]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800310c:	2b08      	cmp	r3, #8
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003110:	4b8e      	ldr	r3, [pc, #568]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311c:	d00c      	beq.n	8003138 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800311e:	4b8b      	ldr	r3, [pc, #556]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d112      	bne.n	8003150 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312a:	4b88      	ldr	r3, [pc, #544]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003136:	d10b      	bne.n	8003150 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	4b84      	ldr	r3, [pc, #528]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d05b      	beq.n	80031fc <HAL_RCC_OscConfig+0x124>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d157      	bne.n	80031fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e25a      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d106      	bne.n	8003168 <HAL_RCC_OscConfig+0x90>
 800315a:	4b7c      	ldr	r3, [pc, #496]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7b      	ldr	r2, [pc, #492]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e01d      	b.n	80031a4 <HAL_RCC_OscConfig+0xcc>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0xb4>
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a75      	ldr	r2, [pc, #468]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b73      	ldr	r3, [pc, #460]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a72      	ldr	r2, [pc, #456]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0xcc>
 800318c:	4b6f      	ldr	r3, [pc, #444]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6e      	ldr	r2, [pc, #440]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b6c      	ldr	r3, [pc, #432]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6b      	ldr	r2, [pc, #428]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800319e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe f8a4 	bl	80012f8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe f8a0 	bl	80012f8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e21f      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b61      	ldr	r3, [pc, #388]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0xdc>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe f890 	bl	80012f8 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fe f88c 	bl	80012f8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e20b      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	4b57      	ldr	r3, [pc, #348]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x104>
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d06f      	beq.n	80032ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800320a:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b00      	cmp	r3, #0
 8003214:	d017      	beq.n	8003246 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003216:	4b4d      	ldr	r3, [pc, #308]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800321e:	2b08      	cmp	r3, #8
 8003220:	d105      	bne.n	800322e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003222:	4b4a      	ldr	r3, [pc, #296]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322e:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d11c      	bne.n	8003274 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323a:	4b44      	ldr	r3, [pc, #272]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d116      	bne.n	8003274 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	4b41      	ldr	r3, [pc, #260]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_RCC_OscConfig+0x186>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e1d3      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4937      	ldr	r1, [pc, #220]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	e03a      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327c:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_RCC_OscConfig+0x278>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fe f839 	bl	80012f8 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328a:	f7fe f835 	bl	80012f8 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e1b4      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_OscConfig+0x274>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4925      	ldr	r1, [pc, #148]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
 80032bc:	e015      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCC_OscConfig+0x278>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe f818 	bl	80012f8 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fe f814 	bl	80012f8 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e193      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d036      	beq.n	8003364 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_RCC_OscConfig+0x27c>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fd fff8 	bl	80012f8 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330c:	f7fd fff4 	bl	80012f8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e173      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x234>
 800332a:	e01b      	b.n	8003364 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_OscConfig+0x27c>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fd ffe1 	bl	80012f8 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	e00e      	b.n	8003358 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333a:	f7fd ffdd 	bl	80012f8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d907      	bls.n	8003358 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e15c      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
 800334c:	40023800 	.word	0x40023800
 8003350:	42470000 	.word	0x42470000
 8003354:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	4b8a      	ldr	r3, [pc, #552]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ea      	bne.n	800333a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8097 	beq.w	80034a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4b83      	ldr	r3, [pc, #524]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	4b7f      	ldr	r3, [pc, #508]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a7e      	ldr	r2, [pc, #504]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b7c      	ldr	r3, [pc, #496]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4b79      	ldr	r3, [pc, #484]	; (8003588 <HAL_RCC_OscConfig+0x4b0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d118      	bne.n	80033e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x4b0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x4b0>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ba:	f7fd ff9d 	bl	80012f8 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7fd ff99 	bl	80012f8 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e118      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <HAL_RCC_OscConfig+0x4b0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x31e>
 80033e8:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a65      	ldr	r2, [pc, #404]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
 80033f4:	e01c      	b.n	8003430 <HAL_RCC_OscConfig+0x358>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x340>
 80033fe:	4b61      	ldr	r3, [pc, #388]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a60      	ldr	r2, [pc, #384]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003404:	f043 0304 	orr.w	r3, r3, #4
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
 800340a:	4b5e      	ldr	r3, [pc, #376]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a5d      	ldr	r2, [pc, #372]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6713      	str	r3, [r2, #112]	; 0x70
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0x358>
 8003418:	4b5a      	ldr	r3, [pc, #360]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a59      	ldr	r2, [pc, #356]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
 8003424:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a56      	ldr	r2, [pc, #344]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800342a:	f023 0304 	bic.w	r3, r3, #4
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d015      	beq.n	8003464 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fd ff5e 	bl	80012f8 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fd ff5a 	bl	80012f8 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0d7      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003456:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0ee      	beq.n	8003440 <HAL_RCC_OscConfig+0x368>
 8003462:	e014      	b.n	800348e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fd ff48 	bl	80012f8 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fd ff44 	bl	80012f8 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0c1      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003482:	4b40      	ldr	r3, [pc, #256]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1ee      	bne.n	800346c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003494:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	4a3a      	ldr	r2, [pc, #232]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80ad 	beq.w	8003604 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d060      	beq.n	8003578 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d145      	bne.n	800354a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b33      	ldr	r3, [pc, #204]	; (800358c <HAL_RCC_OscConfig+0x4b4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd ff18 	bl	80012f8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fd ff14 	bl	80012f8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e093      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	019b      	lsls	r3, r3, #6
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	3b01      	subs	r3, #1
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	071b      	lsls	r3, r3, #28
 8003516:	491b      	ldr	r1, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_OscConfig+0x4b4>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fd fee9 	bl	80012f8 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352a:	f7fd fee5 	bl	80012f8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e064      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x452>
 8003548:	e05c      	b.n	8003604 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_OscConfig+0x4b4>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fd fed2 	bl	80012f8 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003558:	f7fd fece 	bl	80012f8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e04d      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x480>
 8003576:	e045      	b.n	8003604 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e040      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
 8003584:	40023800 	.word	0x40023800
 8003588:	40007000 	.word	0x40007000
 800358c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003590:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <HAL_RCC_OscConfig+0x538>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d030      	beq.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d129      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d122      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d119      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	3b01      	subs	r3, #1
 80035da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d10f      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800

08003614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e03f      	b.n	80036a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd fd50 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f929 	bl	80038b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800366c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800367c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800368c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b08a      	sub	sp, #40	; 0x28
 80036b2:	af02      	add	r7, sp, #8
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d17c      	bne.n	80037c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_UART_Transmit+0x2c>
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e075      	b.n	80037ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_UART_Transmit+0x3e>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e06e      	b.n	80037ca <HAL_UART_Transmit+0x11c>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2221      	movs	r2, #33	; 0x21
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003702:	f7fd fdf9 	bl	80012f8 <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371c:	d108      	bne.n	8003730 <HAL_UART_Transmit+0x82>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e003      	b.n	8003738 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003740:	e02a      	b.n	8003798 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f840 	bl	80037d2 <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e036      	b.n	80037ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003770:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	3302      	adds	r3, #2
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	e007      	b.n	800378a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3301      	adds	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1cf      	bne.n	8003742 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2140      	movs	r1, #64	; 0x40
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f810 	bl	80037d2 <UART_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e006      	b.n	80037ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b090      	sub	sp, #64	; 0x40
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e2:	e050      	b.n	8003886 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d04c      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0x30>
 80037f2:	f7fd fd81 	bl	80012f8 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037fe:	429a      	cmp	r2, r3
 8003800:	d241      	bcs.n	8003886 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003822:	637a      	str	r2, [r7, #52]	; 0x34
 8003824:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e5      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3314      	adds	r3, #20
 800383c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	613b      	str	r3, [r7, #16]
   return(result);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3314      	adds	r3, #20
 8003854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003856:	623a      	str	r2, [r7, #32]
 8003858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	69f9      	ldr	r1, [r7, #28]
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	61bb      	str	r3, [r7, #24]
   return(result);
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e00f      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	bf0c      	ite	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	2300      	movne	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d09f      	beq.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3740      	adds	r7, #64	; 0x40
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b4:	b0c0      	sub	sp, #256	; 0x100
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	68d9      	ldr	r1, [r3, #12]
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	ea40 0301 	orr.w	r3, r0, r1
 80038d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003908:	f021 010c 	bic.w	r1, r1, #12
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003916:	430b      	orrs	r3, r1
 8003918:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	6999      	ldr	r1, [r3, #24]
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	ea40 0301 	orr.w	r3, r0, r1
 8003936:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b8f      	ldr	r3, [pc, #572]	; (8003b7c <UART_SetConfig+0x2cc>)
 8003940:	429a      	cmp	r2, r3
 8003942:	d005      	beq.n	8003950 <UART_SetConfig+0xa0>
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b8d      	ldr	r3, [pc, #564]	; (8003b80 <UART_SetConfig+0x2d0>)
 800394c:	429a      	cmp	r2, r3
 800394e:	d104      	bne.n	800395a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003950:	f7ff f97e 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 8003954:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003958:	e003      	b.n	8003962 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800395a:	f7ff f965 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 800395e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396c:	f040 810c 	bne.w	8003b88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003974:	2200      	movs	r2, #0
 8003976:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800397a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800397e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003982:	4622      	mov	r2, r4
 8003984:	462b      	mov	r3, r5
 8003986:	1891      	adds	r1, r2, r2
 8003988:	65b9      	str	r1, [r7, #88]	; 0x58
 800398a:	415b      	adcs	r3, r3
 800398c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800398e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003992:	4621      	mov	r1, r4
 8003994:	eb12 0801 	adds.w	r8, r2, r1
 8003998:	4629      	mov	r1, r5
 800399a:	eb43 0901 	adc.w	r9, r3, r1
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b2:	4690      	mov	r8, r2
 80039b4:	4699      	mov	r9, r3
 80039b6:	4623      	mov	r3, r4
 80039b8:	eb18 0303 	adds.w	r3, r8, r3
 80039bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039c0:	462b      	mov	r3, r5
 80039c2:	eb49 0303 	adc.w	r3, r9, r3
 80039c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039de:	460b      	mov	r3, r1
 80039e0:	18db      	adds	r3, r3, r3
 80039e2:	653b      	str	r3, [r7, #80]	; 0x50
 80039e4:	4613      	mov	r3, r2
 80039e6:	eb42 0303 	adc.w	r3, r2, r3
 80039ea:	657b      	str	r3, [r7, #84]	; 0x54
 80039ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039f4:	f7fc fc5c 	bl	80002b0 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4b61      	ldr	r3, [pc, #388]	; (8003b84 <UART_SetConfig+0x2d4>)
 80039fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	011c      	lsls	r4, r3, #4
 8003a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a18:	4642      	mov	r2, r8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	1891      	adds	r1, r2, r2
 8003a1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a20:	415b      	adcs	r3, r3
 8003a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a28:	4641      	mov	r1, r8
 8003a2a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a2e:	4649      	mov	r1, r9
 8003a30:	eb43 0b01 	adc.w	fp, r3, r1
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a48:	4692      	mov	sl, r2
 8003a4a:	469b      	mov	fp, r3
 8003a4c:	4643      	mov	r3, r8
 8003a4e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a56:	464b      	mov	r3, r9
 8003a58:	eb4b 0303 	adc.w	r3, fp, r3
 8003a5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a74:	460b      	mov	r3, r1
 8003a76:	18db      	adds	r3, r3, r3
 8003a78:	643b      	str	r3, [r7, #64]	; 0x40
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	eb42 0303 	adc.w	r3, r2, r3
 8003a80:	647b      	str	r3, [r7, #68]	; 0x44
 8003a82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a8a:	f7fc fc11 	bl	80002b0 <__aeabi_uldivmod>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <UART_SetConfig+0x2d4>)
 8003a96:	fba3 2301 	umull	r2, r3, r3, r1
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2264      	movs	r2, #100	; 0x64
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	1acb      	subs	r3, r1, r3
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003aaa:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <UART_SetConfig+0x2d4>)
 8003aac:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ab8:	441c      	add	r4, r3
 8003aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ac8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	1891      	adds	r1, r2, r2
 8003ad2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ad4:	415b      	adcs	r3, r3
 8003ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003adc:	4641      	mov	r1, r8
 8003ade:	1851      	adds	r1, r2, r1
 8003ae0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	414b      	adcs	r3, r1
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003af4:	4659      	mov	r1, fp
 8003af6:	00cb      	lsls	r3, r1, #3
 8003af8:	4651      	mov	r1, sl
 8003afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afe:	4651      	mov	r1, sl
 8003b00:	00ca      	lsls	r2, r1, #3
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	4642      	mov	r2, r8
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b10:	464b      	mov	r3, r9
 8003b12:	460a      	mov	r2, r1
 8003b14:	eb42 0303 	adc.w	r3, r2, r3
 8003b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b30:	460b      	mov	r3, r1
 8003b32:	18db      	adds	r3, r3, r3
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b36:	4613      	mov	r3, r2
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b46:	f7fc fbb3 	bl	80002b0 <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <UART_SetConfig+0x2d4>)
 8003b50:	fba3 1302 	umull	r1, r3, r3, r2
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	2164      	movs	r1, #100	; 0x64
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	3332      	adds	r3, #50	; 0x32
 8003b62:	4a08      	ldr	r2, [pc, #32]	; (8003b84 <UART_SetConfig+0x2d4>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	f003 0207 	and.w	r2, r3, #7
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4422      	add	r2, r4
 8003b76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b78:	e106      	b.n	8003d88 <UART_SetConfig+0x4d8>
 8003b7a:	bf00      	nop
 8003b7c:	40011000 	.word	0x40011000
 8003b80:	40011400 	.word	0x40011400
 8003b84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b9a:	4642      	mov	r2, r8
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	1891      	adds	r1, r2, r2
 8003ba0:	6239      	str	r1, [r7, #32]
 8003ba2:	415b      	adcs	r3, r3
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003baa:	4641      	mov	r1, r8
 8003bac:	1854      	adds	r4, r2, r1
 8003bae:	4649      	mov	r1, r9
 8003bb0:	eb43 0501 	adc.w	r5, r3, r1
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	00eb      	lsls	r3, r5, #3
 8003bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc2:	00e2      	lsls	r2, r4, #3
 8003bc4:	4614      	mov	r4, r2
 8003bc6:	461d      	mov	r5, r3
 8003bc8:	4643      	mov	r3, r8
 8003bca:	18e3      	adds	r3, r4, r3
 8003bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	eb45 0303 	adc.w	r3, r5, r3
 8003bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003be6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	008b      	lsls	r3, r1, #2
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c00:	4621      	mov	r1, r4
 8003c02:	008a      	lsls	r2, r1, #2
 8003c04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c08:	f7fc fb52 	bl	80002b0 <__aeabi_uldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4b60      	ldr	r3, [pc, #384]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003c12:	fba3 2302 	umull	r2, r3, r3, r2
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	011c      	lsls	r4, r3, #4
 8003c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	1891      	adds	r1, r2, r2
 8003c32:	61b9      	str	r1, [r7, #24]
 8003c34:	415b      	adcs	r3, r3
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	1851      	adds	r1, r2, r1
 8003c40:	6139      	str	r1, [r7, #16]
 8003c42:	4649      	mov	r1, r9
 8003c44:	414b      	adcs	r3, r1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c54:	4659      	mov	r1, fp
 8003c56:	00cb      	lsls	r3, r1, #3
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c5e:	4651      	mov	r1, sl
 8003c60:	00ca      	lsls	r2, r1, #3
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	4642      	mov	r2, r8
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c70:	464b      	mov	r3, r9
 8003c72:	460a      	mov	r2, r1
 8003c74:	eb42 0303 	adc.w	r3, r2, r3
 8003c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c94:	4649      	mov	r1, r9
 8003c96:	008b      	lsls	r3, r1, #2
 8003c98:	4641      	mov	r1, r8
 8003c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	008a      	lsls	r2, r1, #2
 8003ca2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ca6:	f7fc fb03 	bl	80002b0 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4b38      	ldr	r3, [pc, #224]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2264      	movs	r2, #100	; 0x64
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	1acb      	subs	r3, r1, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd0:	441c      	add	r4, r3
 8003cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	673b      	str	r3, [r7, #112]	; 0x70
 8003cda:	677a      	str	r2, [r7, #116]	; 0x74
 8003cdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	1891      	adds	r1, r2, r2
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	415b      	adcs	r3, r3
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	1851      	adds	r1, r2, r1
 8003cf4:	6039      	str	r1, [r7, #0]
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	414b      	adcs	r3, r1
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d08:	4659      	mov	r1, fp
 8003d0a:	00cb      	lsls	r3, r1, #3
 8003d0c:	4651      	mov	r1, sl
 8003d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d12:	4651      	mov	r1, sl
 8003d14:	00ca      	lsls	r2, r1, #3
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d22:	464b      	mov	r3, r9
 8003d24:	460a      	mov	r2, r1
 8003d26:	eb42 0303 	adc.w	r3, r2, r3
 8003d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	663b      	str	r3, [r7, #96]	; 0x60
 8003d36:	667a      	str	r2, [r7, #100]	; 0x64
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d44:	4649      	mov	r1, r9
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	4641      	mov	r1, r8
 8003d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4e:	4641      	mov	r1, r8
 8003d50:	008a      	lsls	r2, r1, #2
 8003d52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d56:	f7fc faab 	bl	80002b0 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003d60:	fba3 1302 	umull	r1, r3, r3, r2
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	2164      	movs	r1, #100	; 0x64
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	3332      	adds	r3, #50	; 0x32
 8003d72:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	f003 020f 	and.w	r2, r3, #15
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4422      	add	r2, r4
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d94:	51eb851f 	.word	0x51eb851f

08003d98 <std>:
 8003d98:	2300      	movs	r3, #0
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8003da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003da6:	6083      	str	r3, [r0, #8]
 8003da8:	8181      	strh	r1, [r0, #12]
 8003daa:	6643      	str	r3, [r0, #100]	; 0x64
 8003dac:	81c2      	strh	r2, [r0, #14]
 8003dae:	6183      	str	r3, [r0, #24]
 8003db0:	4619      	mov	r1, r3
 8003db2:	2208      	movs	r2, #8
 8003db4:	305c      	adds	r0, #92	; 0x5c
 8003db6:	f000 f9e5 	bl	8004184 <memset>
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <std+0x38>)
 8003dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <std+0x3c>)
 8003dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <std+0x40>)
 8003dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <std+0x44>)
 8003dc8:	6224      	str	r4, [r4, #32]
 8003dca:	6323      	str	r3, [r4, #48]	; 0x30
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	bf00      	nop
 8003dd0:	08003fd5 	.word	0x08003fd5
 8003dd4:	08003ff7 	.word	0x08003ff7
 8003dd8:	0800402f 	.word	0x0800402f
 8003ddc:	08004053 	.word	0x08004053

08003de0 <stdio_exit_handler>:
 8003de0:	4a02      	ldr	r2, [pc, #8]	; (8003dec <stdio_exit_handler+0xc>)
 8003de2:	4903      	ldr	r1, [pc, #12]	; (8003df0 <stdio_exit_handler+0x10>)
 8003de4:	4803      	ldr	r0, [pc, #12]	; (8003df4 <stdio_exit_handler+0x14>)
 8003de6:	f000 b869 	b.w	8003ebc <_fwalk_sglue>
 8003dea:	bf00      	nop
 8003dec:	20000014 	.word	0x20000014
 8003df0:	08004b1d 	.word	0x08004b1d
 8003df4:	20000020 	.word	0x20000020

08003df8 <cleanup_stdio>:
 8003df8:	6841      	ldr	r1, [r0, #4]
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <cleanup_stdio+0x34>)
 8003dfc:	4299      	cmp	r1, r3
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	4604      	mov	r4, r0
 8003e02:	d001      	beq.n	8003e08 <cleanup_stdio+0x10>
 8003e04:	f000 fe8a 	bl	8004b1c <_fflush_r>
 8003e08:	68a1      	ldr	r1, [r4, #8]
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <cleanup_stdio+0x38>)
 8003e0c:	4299      	cmp	r1, r3
 8003e0e:	d002      	beq.n	8003e16 <cleanup_stdio+0x1e>
 8003e10:	4620      	mov	r0, r4
 8003e12:	f000 fe83 	bl	8004b1c <_fflush_r>
 8003e16:	68e1      	ldr	r1, [r4, #12]
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <cleanup_stdio+0x3c>)
 8003e1a:	4299      	cmp	r1, r3
 8003e1c:	d004      	beq.n	8003e28 <cleanup_stdio+0x30>
 8003e1e:	4620      	mov	r0, r4
 8003e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e24:	f000 be7a 	b.w	8004b1c <_fflush_r>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200001bc 	.word	0x200001bc
 8003e30:	20000224 	.word	0x20000224
 8003e34:	2000028c 	.word	0x2000028c

08003e38 <global_stdio_init.part.0>:
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <global_stdio_init.part.0+0x30>)
 8003e3c:	4c0b      	ldr	r4, [pc, #44]	; (8003e6c <global_stdio_init.part.0+0x34>)
 8003e3e:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <global_stdio_init.part.0+0x38>)
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	4620      	mov	r0, r4
 8003e44:	2200      	movs	r2, #0
 8003e46:	2104      	movs	r1, #4
 8003e48:	f7ff ffa6 	bl	8003d98 <std>
 8003e4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e50:	2201      	movs	r2, #1
 8003e52:	2109      	movs	r1, #9
 8003e54:	f7ff ffa0 	bl	8003d98 <std>
 8003e58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e62:	2112      	movs	r1, #18
 8003e64:	f7ff bf98 	b.w	8003d98 <std>
 8003e68:	200002f4 	.word	0x200002f4
 8003e6c:	200001bc 	.word	0x200001bc
 8003e70:	08003de1 	.word	0x08003de1

08003e74 <__sfp_lock_acquire>:
 8003e74:	4801      	ldr	r0, [pc, #4]	; (8003e7c <__sfp_lock_acquire+0x8>)
 8003e76:	f000 b9fd 	b.w	8004274 <__retarget_lock_acquire_recursive>
 8003e7a:	bf00      	nop
 8003e7c:	200002fd 	.word	0x200002fd

08003e80 <__sfp_lock_release>:
 8003e80:	4801      	ldr	r0, [pc, #4]	; (8003e88 <__sfp_lock_release+0x8>)
 8003e82:	f000 b9f8 	b.w	8004276 <__retarget_lock_release_recursive>
 8003e86:	bf00      	nop
 8003e88:	200002fd 	.word	0x200002fd

08003e8c <__sinit>:
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	4604      	mov	r4, r0
 8003e90:	f7ff fff0 	bl	8003e74 <__sfp_lock_acquire>
 8003e94:	6a23      	ldr	r3, [r4, #32]
 8003e96:	b11b      	cbz	r3, 8003ea0 <__sinit+0x14>
 8003e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e9c:	f7ff bff0 	b.w	8003e80 <__sfp_lock_release>
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <__sinit+0x28>)
 8003ea2:	6223      	str	r3, [r4, #32]
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <__sinit+0x2c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f5      	bne.n	8003e98 <__sinit+0xc>
 8003eac:	f7ff ffc4 	bl	8003e38 <global_stdio_init.part.0>
 8003eb0:	e7f2      	b.n	8003e98 <__sinit+0xc>
 8003eb2:	bf00      	nop
 8003eb4:	08003df9 	.word	0x08003df9
 8003eb8:	200002f4 	.word	0x200002f4

08003ebc <_fwalk_sglue>:
 8003ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	4688      	mov	r8, r1
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8003ed0:	d505      	bpl.n	8003ede <_fwalk_sglue+0x22>
 8003ed2:	6824      	ldr	r4, [r4, #0]
 8003ed4:	2c00      	cmp	r4, #0
 8003ed6:	d1f7      	bne.n	8003ec8 <_fwalk_sglue+0xc>
 8003ed8:	4630      	mov	r0, r6
 8003eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ede:	89ab      	ldrh	r3, [r5, #12]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d907      	bls.n	8003ef4 <_fwalk_sglue+0x38>
 8003ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	d003      	beq.n	8003ef4 <_fwalk_sglue+0x38>
 8003eec:	4629      	mov	r1, r5
 8003eee:	4638      	mov	r0, r7
 8003ef0:	47c0      	blx	r8
 8003ef2:	4306      	orrs	r6, r0
 8003ef4:	3568      	adds	r5, #104	; 0x68
 8003ef6:	e7e9      	b.n	8003ecc <_fwalk_sglue+0x10>

08003ef8 <iprintf>:
 8003ef8:	b40f      	push	{r0, r1, r2, r3}
 8003efa:	b507      	push	{r0, r1, r2, lr}
 8003efc:	4906      	ldr	r1, [pc, #24]	; (8003f18 <iprintf+0x20>)
 8003efe:	ab04      	add	r3, sp, #16
 8003f00:	6808      	ldr	r0, [r1, #0]
 8003f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f06:	6881      	ldr	r1, [r0, #8]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	f000 fad7 	bl	80044bc <_vfiprintf_r>
 8003f0e:	b003      	add	sp, #12
 8003f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f14:	b004      	add	sp, #16
 8003f16:	4770      	bx	lr
 8003f18:	2000006c 	.word	0x2000006c

08003f1c <_puts_r>:
 8003f1c:	6a03      	ldr	r3, [r0, #32]
 8003f1e:	b570      	push	{r4, r5, r6, lr}
 8003f20:	6884      	ldr	r4, [r0, #8]
 8003f22:	4605      	mov	r5, r0
 8003f24:	460e      	mov	r6, r1
 8003f26:	b90b      	cbnz	r3, 8003f2c <_puts_r+0x10>
 8003f28:	f7ff ffb0 	bl	8003e8c <__sinit>
 8003f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f2e:	07db      	lsls	r3, r3, #31
 8003f30:	d405      	bmi.n	8003f3e <_puts_r+0x22>
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	0598      	lsls	r0, r3, #22
 8003f36:	d402      	bmi.n	8003f3e <_puts_r+0x22>
 8003f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f3a:	f000 f99b 	bl	8004274 <__retarget_lock_acquire_recursive>
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	0719      	lsls	r1, r3, #28
 8003f42:	d513      	bpl.n	8003f6c <_puts_r+0x50>
 8003f44:	6923      	ldr	r3, [r4, #16]
 8003f46:	b18b      	cbz	r3, 8003f6c <_puts_r+0x50>
 8003f48:	3e01      	subs	r6, #1
 8003f4a:	68a3      	ldr	r3, [r4, #8]
 8003f4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f50:	3b01      	subs	r3, #1
 8003f52:	60a3      	str	r3, [r4, #8]
 8003f54:	b9e9      	cbnz	r1, 8003f92 <_puts_r+0x76>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da2e      	bge.n	8003fb8 <_puts_r+0x9c>
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	210a      	movs	r1, #10
 8003f5e:	4628      	mov	r0, r5
 8003f60:	f000 f87b 	bl	800405a <__swbuf_r>
 8003f64:	3001      	adds	r0, #1
 8003f66:	d007      	beq.n	8003f78 <_puts_r+0x5c>
 8003f68:	250a      	movs	r5, #10
 8003f6a:	e007      	b.n	8003f7c <_puts_r+0x60>
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f000 f8b0 	bl	80040d4 <__swsetup_r>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d0e7      	beq.n	8003f48 <_puts_r+0x2c>
 8003f78:	f04f 35ff 	mov.w	r5, #4294967295
 8003f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f7e:	07da      	lsls	r2, r3, #31
 8003f80:	d405      	bmi.n	8003f8e <_puts_r+0x72>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	059b      	lsls	r3, r3, #22
 8003f86:	d402      	bmi.n	8003f8e <_puts_r+0x72>
 8003f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f8a:	f000 f974 	bl	8004276 <__retarget_lock_release_recursive>
 8003f8e:	4628      	mov	r0, r5
 8003f90:	bd70      	pop	{r4, r5, r6, pc}
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	da04      	bge.n	8003fa0 <_puts_r+0x84>
 8003f96:	69a2      	ldr	r2, [r4, #24]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	dc06      	bgt.n	8003faa <_puts_r+0x8e>
 8003f9c:	290a      	cmp	r1, #10
 8003f9e:	d004      	beq.n	8003faa <_puts_r+0x8e>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	6022      	str	r2, [r4, #0]
 8003fa6:	7019      	strb	r1, [r3, #0]
 8003fa8:	e7cf      	b.n	8003f4a <_puts_r+0x2e>
 8003faa:	4622      	mov	r2, r4
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 f854 	bl	800405a <__swbuf_r>
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d1c9      	bne.n	8003f4a <_puts_r+0x2e>
 8003fb6:	e7df      	b.n	8003f78 <_puts_r+0x5c>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	250a      	movs	r5, #10
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	6022      	str	r2, [r4, #0]
 8003fc0:	701d      	strb	r5, [r3, #0]
 8003fc2:	e7db      	b.n	8003f7c <_puts_r+0x60>

08003fc4 <puts>:
 8003fc4:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <puts+0xc>)
 8003fc6:	4601      	mov	r1, r0
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	f7ff bfa7 	b.w	8003f1c <_puts_r>
 8003fce:	bf00      	nop
 8003fd0:	2000006c 	.word	0x2000006c

08003fd4 <__sread>:
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fdc:	f000 f8fc 	bl	80041d8 <_read_r>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	bfab      	itete	ge
 8003fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8003fe8:	181b      	addge	r3, r3, r0
 8003fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fee:	bfac      	ite	ge
 8003ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ff2:	81a3      	strhlt	r3, [r4, #12]
 8003ff4:	bd10      	pop	{r4, pc}

08003ff6 <__swrite>:
 8003ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffa:	461f      	mov	r7, r3
 8003ffc:	898b      	ldrh	r3, [r1, #12]
 8003ffe:	05db      	lsls	r3, r3, #23
 8004000:	4605      	mov	r5, r0
 8004002:	460c      	mov	r4, r1
 8004004:	4616      	mov	r6, r2
 8004006:	d505      	bpl.n	8004014 <__swrite+0x1e>
 8004008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400c:	2302      	movs	r3, #2
 800400e:	2200      	movs	r2, #0
 8004010:	f000 f8d0 	bl	80041b4 <_lseek_r>
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800401a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800401e:	81a3      	strh	r3, [r4, #12]
 8004020:	4632      	mov	r2, r6
 8004022:	463b      	mov	r3, r7
 8004024:	4628      	mov	r0, r5
 8004026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800402a:	f000 b8e7 	b.w	80041fc <_write_r>

0800402e <__sseek>:
 800402e:	b510      	push	{r4, lr}
 8004030:	460c      	mov	r4, r1
 8004032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004036:	f000 f8bd 	bl	80041b4 <_lseek_r>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	bf15      	itete	ne
 8004040:	6560      	strne	r0, [r4, #84]	; 0x54
 8004042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800404a:	81a3      	strheq	r3, [r4, #12]
 800404c:	bf18      	it	ne
 800404e:	81a3      	strhne	r3, [r4, #12]
 8004050:	bd10      	pop	{r4, pc}

08004052 <__sclose>:
 8004052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004056:	f000 b89d 	b.w	8004194 <_close_r>

0800405a <__swbuf_r>:
 800405a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405c:	460e      	mov	r6, r1
 800405e:	4614      	mov	r4, r2
 8004060:	4605      	mov	r5, r0
 8004062:	b118      	cbz	r0, 800406c <__swbuf_r+0x12>
 8004064:	6a03      	ldr	r3, [r0, #32]
 8004066:	b90b      	cbnz	r3, 800406c <__swbuf_r+0x12>
 8004068:	f7ff ff10 	bl	8003e8c <__sinit>
 800406c:	69a3      	ldr	r3, [r4, #24]
 800406e:	60a3      	str	r3, [r4, #8]
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	071a      	lsls	r2, r3, #28
 8004074:	d525      	bpl.n	80040c2 <__swbuf_r+0x68>
 8004076:	6923      	ldr	r3, [r4, #16]
 8004078:	b31b      	cbz	r3, 80040c2 <__swbuf_r+0x68>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	1a98      	subs	r0, r3, r2
 8004080:	6963      	ldr	r3, [r4, #20]
 8004082:	b2f6      	uxtb	r6, r6
 8004084:	4283      	cmp	r3, r0
 8004086:	4637      	mov	r7, r6
 8004088:	dc04      	bgt.n	8004094 <__swbuf_r+0x3a>
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f000 fd45 	bl	8004b1c <_fflush_r>
 8004092:	b9e0      	cbnz	r0, 80040ce <__swbuf_r+0x74>
 8004094:	68a3      	ldr	r3, [r4, #8]
 8004096:	3b01      	subs	r3, #1
 8004098:	60a3      	str	r3, [r4, #8]
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	6022      	str	r2, [r4, #0]
 80040a0:	701e      	strb	r6, [r3, #0]
 80040a2:	6962      	ldr	r2, [r4, #20]
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d004      	beq.n	80040b4 <__swbuf_r+0x5a>
 80040aa:	89a3      	ldrh	r3, [r4, #12]
 80040ac:	07db      	lsls	r3, r3, #31
 80040ae:	d506      	bpl.n	80040be <__swbuf_r+0x64>
 80040b0:	2e0a      	cmp	r6, #10
 80040b2:	d104      	bne.n	80040be <__swbuf_r+0x64>
 80040b4:	4621      	mov	r1, r4
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 fd30 	bl	8004b1c <_fflush_r>
 80040bc:	b938      	cbnz	r0, 80040ce <__swbuf_r+0x74>
 80040be:	4638      	mov	r0, r7
 80040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040c2:	4621      	mov	r1, r4
 80040c4:	4628      	mov	r0, r5
 80040c6:	f000 f805 	bl	80040d4 <__swsetup_r>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d0d5      	beq.n	800407a <__swbuf_r+0x20>
 80040ce:	f04f 37ff 	mov.w	r7, #4294967295
 80040d2:	e7f4      	b.n	80040be <__swbuf_r+0x64>

080040d4 <__swsetup_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <__swsetup_r+0xac>)
 80040d8:	4605      	mov	r5, r0
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	460c      	mov	r4, r1
 80040de:	b118      	cbz	r0, 80040e8 <__swsetup_r+0x14>
 80040e0:	6a03      	ldr	r3, [r0, #32]
 80040e2:	b90b      	cbnz	r3, 80040e8 <__swsetup_r+0x14>
 80040e4:	f7ff fed2 	bl	8003e8c <__sinit>
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040ee:	0718      	lsls	r0, r3, #28
 80040f0:	d422      	bmi.n	8004138 <__swsetup_r+0x64>
 80040f2:	06d9      	lsls	r1, r3, #27
 80040f4:	d407      	bmi.n	8004106 <__swsetup_r+0x32>
 80040f6:	2309      	movs	r3, #9
 80040f8:	602b      	str	r3, [r5, #0]
 80040fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	e034      	b.n	8004170 <__swsetup_r+0x9c>
 8004106:	0758      	lsls	r0, r3, #29
 8004108:	d512      	bpl.n	8004130 <__swsetup_r+0x5c>
 800410a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800410c:	b141      	cbz	r1, 8004120 <__swsetup_r+0x4c>
 800410e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004112:	4299      	cmp	r1, r3
 8004114:	d002      	beq.n	800411c <__swsetup_r+0x48>
 8004116:	4628      	mov	r0, r5
 8004118:	f000 f8ae 	bl	8004278 <_free_r>
 800411c:	2300      	movs	r3, #0
 800411e:	6363      	str	r3, [r4, #52]	; 0x34
 8004120:	89a3      	ldrh	r3, [r4, #12]
 8004122:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004126:	81a3      	strh	r3, [r4, #12]
 8004128:	2300      	movs	r3, #0
 800412a:	6063      	str	r3, [r4, #4]
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	f043 0308 	orr.w	r3, r3, #8
 8004136:	81a3      	strh	r3, [r4, #12]
 8004138:	6923      	ldr	r3, [r4, #16]
 800413a:	b94b      	cbnz	r3, 8004150 <__swsetup_r+0x7c>
 800413c:	89a3      	ldrh	r3, [r4, #12]
 800413e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004146:	d003      	beq.n	8004150 <__swsetup_r+0x7c>
 8004148:	4621      	mov	r1, r4
 800414a:	4628      	mov	r0, r5
 800414c:	f000 fd34 	bl	8004bb8 <__smakebuf_r>
 8004150:	89a0      	ldrh	r0, [r4, #12]
 8004152:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004156:	f010 0301 	ands.w	r3, r0, #1
 800415a:	d00a      	beq.n	8004172 <__swsetup_r+0x9e>
 800415c:	2300      	movs	r3, #0
 800415e:	60a3      	str	r3, [r4, #8]
 8004160:	6963      	ldr	r3, [r4, #20]
 8004162:	425b      	negs	r3, r3
 8004164:	61a3      	str	r3, [r4, #24]
 8004166:	6923      	ldr	r3, [r4, #16]
 8004168:	b943      	cbnz	r3, 800417c <__swsetup_r+0xa8>
 800416a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800416e:	d1c4      	bne.n	80040fa <__swsetup_r+0x26>
 8004170:	bd38      	pop	{r3, r4, r5, pc}
 8004172:	0781      	lsls	r1, r0, #30
 8004174:	bf58      	it	pl
 8004176:	6963      	ldrpl	r3, [r4, #20]
 8004178:	60a3      	str	r3, [r4, #8]
 800417a:	e7f4      	b.n	8004166 <__swsetup_r+0x92>
 800417c:	2000      	movs	r0, #0
 800417e:	e7f7      	b.n	8004170 <__swsetup_r+0x9c>
 8004180:	2000006c 	.word	0x2000006c

08004184 <memset>:
 8004184:	4402      	add	r2, r0
 8004186:	4603      	mov	r3, r0
 8004188:	4293      	cmp	r3, r2
 800418a:	d100      	bne.n	800418e <memset+0xa>
 800418c:	4770      	bx	lr
 800418e:	f803 1b01 	strb.w	r1, [r3], #1
 8004192:	e7f9      	b.n	8004188 <memset+0x4>

08004194 <_close_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4d06      	ldr	r5, [pc, #24]	; (80041b0 <_close_r+0x1c>)
 8004198:	2300      	movs	r3, #0
 800419a:	4604      	mov	r4, r0
 800419c:	4608      	mov	r0, r1
 800419e:	602b      	str	r3, [r5, #0]
 80041a0:	f7fc fecd 	bl	8000f3e <_close>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_close_r+0x1a>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_close_r+0x1a>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	200002f8 	.word	0x200002f8

080041b4 <_lseek_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d07      	ldr	r5, [pc, #28]	; (80041d4 <_lseek_r+0x20>)
 80041b8:	4604      	mov	r4, r0
 80041ba:	4608      	mov	r0, r1
 80041bc:	4611      	mov	r1, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	602a      	str	r2, [r5, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7fc fee2 	bl	8000f8c <_lseek>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_lseek_r+0x1e>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_lseek_r+0x1e>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	200002f8 	.word	0x200002f8

080041d8 <_read_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d07      	ldr	r5, [pc, #28]	; (80041f8 <_read_r+0x20>)
 80041dc:	4604      	mov	r4, r0
 80041de:	4608      	mov	r0, r1
 80041e0:	4611      	mov	r1, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	602a      	str	r2, [r5, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7fc fe70 	bl	8000ecc <_read>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_read_r+0x1e>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_read_r+0x1e>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	200002f8 	.word	0x200002f8

080041fc <_write_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4d07      	ldr	r5, [pc, #28]	; (800421c <_write_r+0x20>)
 8004200:	4604      	mov	r4, r0
 8004202:	4608      	mov	r0, r1
 8004204:	4611      	mov	r1, r2
 8004206:	2200      	movs	r2, #0
 8004208:	602a      	str	r2, [r5, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f7fc fe7b 	bl	8000f06 <_write>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_write_r+0x1e>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_write_r+0x1e>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	200002f8 	.word	0x200002f8

08004220 <__errno>:
 8004220:	4b01      	ldr	r3, [pc, #4]	; (8004228 <__errno+0x8>)
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	2000006c 	.word	0x2000006c

0800422c <__libc_init_array>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4d0d      	ldr	r5, [pc, #52]	; (8004264 <__libc_init_array+0x38>)
 8004230:	4c0d      	ldr	r4, [pc, #52]	; (8004268 <__libc_init_array+0x3c>)
 8004232:	1b64      	subs	r4, r4, r5
 8004234:	10a4      	asrs	r4, r4, #2
 8004236:	2600      	movs	r6, #0
 8004238:	42a6      	cmp	r6, r4
 800423a:	d109      	bne.n	8004250 <__libc_init_array+0x24>
 800423c:	4d0b      	ldr	r5, [pc, #44]	; (800426c <__libc_init_array+0x40>)
 800423e:	4c0c      	ldr	r4, [pc, #48]	; (8004270 <__libc_init_array+0x44>)
 8004240:	f000 fd28 	bl	8004c94 <_init>
 8004244:	1b64      	subs	r4, r4, r5
 8004246:	10a4      	asrs	r4, r4, #2
 8004248:	2600      	movs	r6, #0
 800424a:	42a6      	cmp	r6, r4
 800424c:	d105      	bne.n	800425a <__libc_init_array+0x2e>
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	f855 3b04 	ldr.w	r3, [r5], #4
 8004254:	4798      	blx	r3
 8004256:	3601      	adds	r6, #1
 8004258:	e7ee      	b.n	8004238 <__libc_init_array+0xc>
 800425a:	f855 3b04 	ldr.w	r3, [r5], #4
 800425e:	4798      	blx	r3
 8004260:	3601      	adds	r6, #1
 8004262:	e7f2      	b.n	800424a <__libc_init_array+0x1e>
 8004264:	08004e08 	.word	0x08004e08
 8004268:	08004e08 	.word	0x08004e08
 800426c:	08004e08 	.word	0x08004e08
 8004270:	08004e0c 	.word	0x08004e0c

08004274 <__retarget_lock_acquire_recursive>:
 8004274:	4770      	bx	lr

08004276 <__retarget_lock_release_recursive>:
 8004276:	4770      	bx	lr

08004278 <_free_r>:
 8004278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800427a:	2900      	cmp	r1, #0
 800427c:	d044      	beq.n	8004308 <_free_r+0x90>
 800427e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004282:	9001      	str	r0, [sp, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f1a1 0404 	sub.w	r4, r1, #4
 800428a:	bfb8      	it	lt
 800428c:	18e4      	addlt	r4, r4, r3
 800428e:	f000 f8df 	bl	8004450 <__malloc_lock>
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <_free_r+0x94>)
 8004294:	9801      	ldr	r0, [sp, #4]
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	b933      	cbnz	r3, 80042a8 <_free_r+0x30>
 800429a:	6063      	str	r3, [r4, #4]
 800429c:	6014      	str	r4, [r2, #0]
 800429e:	b003      	add	sp, #12
 80042a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042a4:	f000 b8da 	b.w	800445c <__malloc_unlock>
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	d908      	bls.n	80042be <_free_r+0x46>
 80042ac:	6825      	ldr	r5, [r4, #0]
 80042ae:	1961      	adds	r1, r4, r5
 80042b0:	428b      	cmp	r3, r1
 80042b2:	bf01      	itttt	eq
 80042b4:	6819      	ldreq	r1, [r3, #0]
 80042b6:	685b      	ldreq	r3, [r3, #4]
 80042b8:	1949      	addeq	r1, r1, r5
 80042ba:	6021      	streq	r1, [r4, #0]
 80042bc:	e7ed      	b.n	800429a <_free_r+0x22>
 80042be:	461a      	mov	r2, r3
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	b10b      	cbz	r3, 80042c8 <_free_r+0x50>
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	d9fa      	bls.n	80042be <_free_r+0x46>
 80042c8:	6811      	ldr	r1, [r2, #0]
 80042ca:	1855      	adds	r5, r2, r1
 80042cc:	42a5      	cmp	r5, r4
 80042ce:	d10b      	bne.n	80042e8 <_free_r+0x70>
 80042d0:	6824      	ldr	r4, [r4, #0]
 80042d2:	4421      	add	r1, r4
 80042d4:	1854      	adds	r4, r2, r1
 80042d6:	42a3      	cmp	r3, r4
 80042d8:	6011      	str	r1, [r2, #0]
 80042da:	d1e0      	bne.n	800429e <_free_r+0x26>
 80042dc:	681c      	ldr	r4, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	6053      	str	r3, [r2, #4]
 80042e2:	440c      	add	r4, r1
 80042e4:	6014      	str	r4, [r2, #0]
 80042e6:	e7da      	b.n	800429e <_free_r+0x26>
 80042e8:	d902      	bls.n	80042f0 <_free_r+0x78>
 80042ea:	230c      	movs	r3, #12
 80042ec:	6003      	str	r3, [r0, #0]
 80042ee:	e7d6      	b.n	800429e <_free_r+0x26>
 80042f0:	6825      	ldr	r5, [r4, #0]
 80042f2:	1961      	adds	r1, r4, r5
 80042f4:	428b      	cmp	r3, r1
 80042f6:	bf04      	itt	eq
 80042f8:	6819      	ldreq	r1, [r3, #0]
 80042fa:	685b      	ldreq	r3, [r3, #4]
 80042fc:	6063      	str	r3, [r4, #4]
 80042fe:	bf04      	itt	eq
 8004300:	1949      	addeq	r1, r1, r5
 8004302:	6021      	streq	r1, [r4, #0]
 8004304:	6054      	str	r4, [r2, #4]
 8004306:	e7ca      	b.n	800429e <_free_r+0x26>
 8004308:	b003      	add	sp, #12
 800430a:	bd30      	pop	{r4, r5, pc}
 800430c:	20000300 	.word	0x20000300

08004310 <sbrk_aligned>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4e0e      	ldr	r6, [pc, #56]	; (800434c <sbrk_aligned+0x3c>)
 8004314:	460c      	mov	r4, r1
 8004316:	6831      	ldr	r1, [r6, #0]
 8004318:	4605      	mov	r5, r0
 800431a:	b911      	cbnz	r1, 8004322 <sbrk_aligned+0x12>
 800431c:	f000 fcaa 	bl	8004c74 <_sbrk_r>
 8004320:	6030      	str	r0, [r6, #0]
 8004322:	4621      	mov	r1, r4
 8004324:	4628      	mov	r0, r5
 8004326:	f000 fca5 	bl	8004c74 <_sbrk_r>
 800432a:	1c43      	adds	r3, r0, #1
 800432c:	d00a      	beq.n	8004344 <sbrk_aligned+0x34>
 800432e:	1cc4      	adds	r4, r0, #3
 8004330:	f024 0403 	bic.w	r4, r4, #3
 8004334:	42a0      	cmp	r0, r4
 8004336:	d007      	beq.n	8004348 <sbrk_aligned+0x38>
 8004338:	1a21      	subs	r1, r4, r0
 800433a:	4628      	mov	r0, r5
 800433c:	f000 fc9a 	bl	8004c74 <_sbrk_r>
 8004340:	3001      	adds	r0, #1
 8004342:	d101      	bne.n	8004348 <sbrk_aligned+0x38>
 8004344:	f04f 34ff 	mov.w	r4, #4294967295
 8004348:	4620      	mov	r0, r4
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	20000304 	.word	0x20000304

08004350 <_malloc_r>:
 8004350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004354:	1ccd      	adds	r5, r1, #3
 8004356:	f025 0503 	bic.w	r5, r5, #3
 800435a:	3508      	adds	r5, #8
 800435c:	2d0c      	cmp	r5, #12
 800435e:	bf38      	it	cc
 8004360:	250c      	movcc	r5, #12
 8004362:	2d00      	cmp	r5, #0
 8004364:	4607      	mov	r7, r0
 8004366:	db01      	blt.n	800436c <_malloc_r+0x1c>
 8004368:	42a9      	cmp	r1, r5
 800436a:	d905      	bls.n	8004378 <_malloc_r+0x28>
 800436c:	230c      	movs	r3, #12
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	2600      	movs	r6, #0
 8004372:	4630      	mov	r0, r6
 8004374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004378:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800444c <_malloc_r+0xfc>
 800437c:	f000 f868 	bl	8004450 <__malloc_lock>
 8004380:	f8d8 3000 	ldr.w	r3, [r8]
 8004384:	461c      	mov	r4, r3
 8004386:	bb5c      	cbnz	r4, 80043e0 <_malloc_r+0x90>
 8004388:	4629      	mov	r1, r5
 800438a:	4638      	mov	r0, r7
 800438c:	f7ff ffc0 	bl	8004310 <sbrk_aligned>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	4604      	mov	r4, r0
 8004394:	d155      	bne.n	8004442 <_malloc_r+0xf2>
 8004396:	f8d8 4000 	ldr.w	r4, [r8]
 800439a:	4626      	mov	r6, r4
 800439c:	2e00      	cmp	r6, #0
 800439e:	d145      	bne.n	800442c <_malloc_r+0xdc>
 80043a0:	2c00      	cmp	r4, #0
 80043a2:	d048      	beq.n	8004436 <_malloc_r+0xe6>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	4631      	mov	r1, r6
 80043a8:	4638      	mov	r0, r7
 80043aa:	eb04 0903 	add.w	r9, r4, r3
 80043ae:	f000 fc61 	bl	8004c74 <_sbrk_r>
 80043b2:	4581      	cmp	r9, r0
 80043b4:	d13f      	bne.n	8004436 <_malloc_r+0xe6>
 80043b6:	6821      	ldr	r1, [r4, #0]
 80043b8:	1a6d      	subs	r5, r5, r1
 80043ba:	4629      	mov	r1, r5
 80043bc:	4638      	mov	r0, r7
 80043be:	f7ff ffa7 	bl	8004310 <sbrk_aligned>
 80043c2:	3001      	adds	r0, #1
 80043c4:	d037      	beq.n	8004436 <_malloc_r+0xe6>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	442b      	add	r3, r5
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	f8d8 3000 	ldr.w	r3, [r8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d038      	beq.n	8004446 <_malloc_r+0xf6>
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	42a2      	cmp	r2, r4
 80043d8:	d12b      	bne.n	8004432 <_malloc_r+0xe2>
 80043da:	2200      	movs	r2, #0
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	e00f      	b.n	8004400 <_malloc_r+0xb0>
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	1b52      	subs	r2, r2, r5
 80043e4:	d41f      	bmi.n	8004426 <_malloc_r+0xd6>
 80043e6:	2a0b      	cmp	r2, #11
 80043e8:	d917      	bls.n	800441a <_malloc_r+0xca>
 80043ea:	1961      	adds	r1, r4, r5
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	6025      	str	r5, [r4, #0]
 80043f0:	bf18      	it	ne
 80043f2:	6059      	strne	r1, [r3, #4]
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	bf08      	it	eq
 80043f8:	f8c8 1000 	streq.w	r1, [r8]
 80043fc:	5162      	str	r2, [r4, r5]
 80043fe:	604b      	str	r3, [r1, #4]
 8004400:	4638      	mov	r0, r7
 8004402:	f104 060b 	add.w	r6, r4, #11
 8004406:	f000 f829 	bl	800445c <__malloc_unlock>
 800440a:	f026 0607 	bic.w	r6, r6, #7
 800440e:	1d23      	adds	r3, r4, #4
 8004410:	1af2      	subs	r2, r6, r3
 8004412:	d0ae      	beq.n	8004372 <_malloc_r+0x22>
 8004414:	1b9b      	subs	r3, r3, r6
 8004416:	50a3      	str	r3, [r4, r2]
 8004418:	e7ab      	b.n	8004372 <_malloc_r+0x22>
 800441a:	42a3      	cmp	r3, r4
 800441c:	6862      	ldr	r2, [r4, #4]
 800441e:	d1dd      	bne.n	80043dc <_malloc_r+0x8c>
 8004420:	f8c8 2000 	str.w	r2, [r8]
 8004424:	e7ec      	b.n	8004400 <_malloc_r+0xb0>
 8004426:	4623      	mov	r3, r4
 8004428:	6864      	ldr	r4, [r4, #4]
 800442a:	e7ac      	b.n	8004386 <_malloc_r+0x36>
 800442c:	4634      	mov	r4, r6
 800442e:	6876      	ldr	r6, [r6, #4]
 8004430:	e7b4      	b.n	800439c <_malloc_r+0x4c>
 8004432:	4613      	mov	r3, r2
 8004434:	e7cc      	b.n	80043d0 <_malloc_r+0x80>
 8004436:	230c      	movs	r3, #12
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4638      	mov	r0, r7
 800443c:	f000 f80e 	bl	800445c <__malloc_unlock>
 8004440:	e797      	b.n	8004372 <_malloc_r+0x22>
 8004442:	6025      	str	r5, [r4, #0]
 8004444:	e7dc      	b.n	8004400 <_malloc_r+0xb0>
 8004446:	605b      	str	r3, [r3, #4]
 8004448:	deff      	udf	#255	; 0xff
 800444a:	bf00      	nop
 800444c:	20000300 	.word	0x20000300

08004450 <__malloc_lock>:
 8004450:	4801      	ldr	r0, [pc, #4]	; (8004458 <__malloc_lock+0x8>)
 8004452:	f7ff bf0f 	b.w	8004274 <__retarget_lock_acquire_recursive>
 8004456:	bf00      	nop
 8004458:	200002fc 	.word	0x200002fc

0800445c <__malloc_unlock>:
 800445c:	4801      	ldr	r0, [pc, #4]	; (8004464 <__malloc_unlock+0x8>)
 800445e:	f7ff bf0a 	b.w	8004276 <__retarget_lock_release_recursive>
 8004462:	bf00      	nop
 8004464:	200002fc 	.word	0x200002fc

08004468 <__sfputc_r>:
 8004468:	6893      	ldr	r3, [r2, #8]
 800446a:	3b01      	subs	r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	b410      	push	{r4}
 8004470:	6093      	str	r3, [r2, #8]
 8004472:	da08      	bge.n	8004486 <__sfputc_r+0x1e>
 8004474:	6994      	ldr	r4, [r2, #24]
 8004476:	42a3      	cmp	r3, r4
 8004478:	db01      	blt.n	800447e <__sfputc_r+0x16>
 800447a:	290a      	cmp	r1, #10
 800447c:	d103      	bne.n	8004486 <__sfputc_r+0x1e>
 800447e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004482:	f7ff bdea 	b.w	800405a <__swbuf_r>
 8004486:	6813      	ldr	r3, [r2, #0]
 8004488:	1c58      	adds	r0, r3, #1
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	7019      	strb	r1, [r3, #0]
 800448e:	4608      	mov	r0, r1
 8004490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004494:	4770      	bx	lr

08004496 <__sfputs_r>:
 8004496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004498:	4606      	mov	r6, r0
 800449a:	460f      	mov	r7, r1
 800449c:	4614      	mov	r4, r2
 800449e:	18d5      	adds	r5, r2, r3
 80044a0:	42ac      	cmp	r4, r5
 80044a2:	d101      	bne.n	80044a8 <__sfputs_r+0x12>
 80044a4:	2000      	movs	r0, #0
 80044a6:	e007      	b.n	80044b8 <__sfputs_r+0x22>
 80044a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ac:	463a      	mov	r2, r7
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7ff ffda 	bl	8004468 <__sfputc_r>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d1f3      	bne.n	80044a0 <__sfputs_r+0xa>
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044bc <_vfiprintf_r>:
 80044bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c0:	460d      	mov	r5, r1
 80044c2:	b09d      	sub	sp, #116	; 0x74
 80044c4:	4614      	mov	r4, r2
 80044c6:	4698      	mov	r8, r3
 80044c8:	4606      	mov	r6, r0
 80044ca:	b118      	cbz	r0, 80044d4 <_vfiprintf_r+0x18>
 80044cc:	6a03      	ldr	r3, [r0, #32]
 80044ce:	b90b      	cbnz	r3, 80044d4 <_vfiprintf_r+0x18>
 80044d0:	f7ff fcdc 	bl	8003e8c <__sinit>
 80044d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044d6:	07d9      	lsls	r1, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <_vfiprintf_r+0x2a>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	059a      	lsls	r2, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_vfiprintf_r+0x2a>
 80044e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044e2:	f7ff fec7 	bl	8004274 <__retarget_lock_acquire_recursive>
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	071b      	lsls	r3, r3, #28
 80044ea:	d501      	bpl.n	80044f0 <_vfiprintf_r+0x34>
 80044ec:	692b      	ldr	r3, [r5, #16]
 80044ee:	b99b      	cbnz	r3, 8004518 <_vfiprintf_r+0x5c>
 80044f0:	4629      	mov	r1, r5
 80044f2:	4630      	mov	r0, r6
 80044f4:	f7ff fdee 	bl	80040d4 <__swsetup_r>
 80044f8:	b170      	cbz	r0, 8004518 <_vfiprintf_r+0x5c>
 80044fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044fc:	07dc      	lsls	r4, r3, #31
 80044fe:	d504      	bpl.n	800450a <_vfiprintf_r+0x4e>
 8004500:	f04f 30ff 	mov.w	r0, #4294967295
 8004504:	b01d      	add	sp, #116	; 0x74
 8004506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	0598      	lsls	r0, r3, #22
 800450e:	d4f7      	bmi.n	8004500 <_vfiprintf_r+0x44>
 8004510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004512:	f7ff feb0 	bl	8004276 <__retarget_lock_release_recursive>
 8004516:	e7f3      	b.n	8004500 <_vfiprintf_r+0x44>
 8004518:	2300      	movs	r3, #0
 800451a:	9309      	str	r3, [sp, #36]	; 0x24
 800451c:	2320      	movs	r3, #32
 800451e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004522:	f8cd 800c 	str.w	r8, [sp, #12]
 8004526:	2330      	movs	r3, #48	; 0x30
 8004528:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80046dc <_vfiprintf_r+0x220>
 800452c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004530:	f04f 0901 	mov.w	r9, #1
 8004534:	4623      	mov	r3, r4
 8004536:	469a      	mov	sl, r3
 8004538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800453c:	b10a      	cbz	r2, 8004542 <_vfiprintf_r+0x86>
 800453e:	2a25      	cmp	r2, #37	; 0x25
 8004540:	d1f9      	bne.n	8004536 <_vfiprintf_r+0x7a>
 8004542:	ebba 0b04 	subs.w	fp, sl, r4
 8004546:	d00b      	beq.n	8004560 <_vfiprintf_r+0xa4>
 8004548:	465b      	mov	r3, fp
 800454a:	4622      	mov	r2, r4
 800454c:	4629      	mov	r1, r5
 800454e:	4630      	mov	r0, r6
 8004550:	f7ff ffa1 	bl	8004496 <__sfputs_r>
 8004554:	3001      	adds	r0, #1
 8004556:	f000 80a9 	beq.w	80046ac <_vfiprintf_r+0x1f0>
 800455a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455c:	445a      	add	r2, fp
 800455e:	9209      	str	r2, [sp, #36]	; 0x24
 8004560:	f89a 3000 	ldrb.w	r3, [sl]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a1 	beq.w	80046ac <_vfiprintf_r+0x1f0>
 800456a:	2300      	movs	r3, #0
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004574:	f10a 0a01 	add.w	sl, sl, #1
 8004578:	9304      	str	r3, [sp, #16]
 800457a:	9307      	str	r3, [sp, #28]
 800457c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004580:	931a      	str	r3, [sp, #104]	; 0x68
 8004582:	4654      	mov	r4, sl
 8004584:	2205      	movs	r2, #5
 8004586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458a:	4854      	ldr	r0, [pc, #336]	; (80046dc <_vfiprintf_r+0x220>)
 800458c:	f7fb fe40 	bl	8000210 <memchr>
 8004590:	9a04      	ldr	r2, [sp, #16]
 8004592:	b9d8      	cbnz	r0, 80045cc <_vfiprintf_r+0x110>
 8004594:	06d1      	lsls	r1, r2, #27
 8004596:	bf44      	itt	mi
 8004598:	2320      	movmi	r3, #32
 800459a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800459e:	0713      	lsls	r3, r2, #28
 80045a0:	bf44      	itt	mi
 80045a2:	232b      	movmi	r3, #43	; 0x2b
 80045a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a8:	f89a 3000 	ldrb.w	r3, [sl]
 80045ac:	2b2a      	cmp	r3, #42	; 0x2a
 80045ae:	d015      	beq.n	80045dc <_vfiprintf_r+0x120>
 80045b0:	9a07      	ldr	r2, [sp, #28]
 80045b2:	4654      	mov	r4, sl
 80045b4:	2000      	movs	r0, #0
 80045b6:	f04f 0c0a 	mov.w	ip, #10
 80045ba:	4621      	mov	r1, r4
 80045bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c0:	3b30      	subs	r3, #48	; 0x30
 80045c2:	2b09      	cmp	r3, #9
 80045c4:	d94d      	bls.n	8004662 <_vfiprintf_r+0x1a6>
 80045c6:	b1b0      	cbz	r0, 80045f6 <_vfiprintf_r+0x13a>
 80045c8:	9207      	str	r2, [sp, #28]
 80045ca:	e014      	b.n	80045f6 <_vfiprintf_r+0x13a>
 80045cc:	eba0 0308 	sub.w	r3, r0, r8
 80045d0:	fa09 f303 	lsl.w	r3, r9, r3
 80045d4:	4313      	orrs	r3, r2
 80045d6:	9304      	str	r3, [sp, #16]
 80045d8:	46a2      	mov	sl, r4
 80045da:	e7d2      	b.n	8004582 <_vfiprintf_r+0xc6>
 80045dc:	9b03      	ldr	r3, [sp, #12]
 80045de:	1d19      	adds	r1, r3, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	9103      	str	r1, [sp, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bfbb      	ittet	lt
 80045e8:	425b      	neglt	r3, r3
 80045ea:	f042 0202 	orrlt.w	r2, r2, #2
 80045ee:	9307      	strge	r3, [sp, #28]
 80045f0:	9307      	strlt	r3, [sp, #28]
 80045f2:	bfb8      	it	lt
 80045f4:	9204      	strlt	r2, [sp, #16]
 80045f6:	7823      	ldrb	r3, [r4, #0]
 80045f8:	2b2e      	cmp	r3, #46	; 0x2e
 80045fa:	d10c      	bne.n	8004616 <_vfiprintf_r+0x15a>
 80045fc:	7863      	ldrb	r3, [r4, #1]
 80045fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004600:	d134      	bne.n	800466c <_vfiprintf_r+0x1b0>
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	1d1a      	adds	r2, r3, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	9203      	str	r2, [sp, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	bfb8      	it	lt
 800460e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004612:	3402      	adds	r4, #2
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80046ec <_vfiprintf_r+0x230>
 800461a:	7821      	ldrb	r1, [r4, #0]
 800461c:	2203      	movs	r2, #3
 800461e:	4650      	mov	r0, sl
 8004620:	f7fb fdf6 	bl	8000210 <memchr>
 8004624:	b138      	cbz	r0, 8004636 <_vfiprintf_r+0x17a>
 8004626:	9b04      	ldr	r3, [sp, #16]
 8004628:	eba0 000a 	sub.w	r0, r0, sl
 800462c:	2240      	movs	r2, #64	; 0x40
 800462e:	4082      	lsls	r2, r0
 8004630:	4313      	orrs	r3, r2
 8004632:	3401      	adds	r4, #1
 8004634:	9304      	str	r3, [sp, #16]
 8004636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463a:	4829      	ldr	r0, [pc, #164]	; (80046e0 <_vfiprintf_r+0x224>)
 800463c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004640:	2206      	movs	r2, #6
 8004642:	f7fb fde5 	bl	8000210 <memchr>
 8004646:	2800      	cmp	r0, #0
 8004648:	d03f      	beq.n	80046ca <_vfiprintf_r+0x20e>
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <_vfiprintf_r+0x228>)
 800464c:	bb1b      	cbnz	r3, 8004696 <_vfiprintf_r+0x1da>
 800464e:	9b03      	ldr	r3, [sp, #12]
 8004650:	3307      	adds	r3, #7
 8004652:	f023 0307 	bic.w	r3, r3, #7
 8004656:	3308      	adds	r3, #8
 8004658:	9303      	str	r3, [sp, #12]
 800465a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465c:	443b      	add	r3, r7
 800465e:	9309      	str	r3, [sp, #36]	; 0x24
 8004660:	e768      	b.n	8004534 <_vfiprintf_r+0x78>
 8004662:	fb0c 3202 	mla	r2, ip, r2, r3
 8004666:	460c      	mov	r4, r1
 8004668:	2001      	movs	r0, #1
 800466a:	e7a6      	b.n	80045ba <_vfiprintf_r+0xfe>
 800466c:	2300      	movs	r3, #0
 800466e:	3401      	adds	r4, #1
 8004670:	9305      	str	r3, [sp, #20]
 8004672:	4619      	mov	r1, r3
 8004674:	f04f 0c0a 	mov.w	ip, #10
 8004678:	4620      	mov	r0, r4
 800467a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800467e:	3a30      	subs	r2, #48	; 0x30
 8004680:	2a09      	cmp	r2, #9
 8004682:	d903      	bls.n	800468c <_vfiprintf_r+0x1d0>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0c6      	beq.n	8004616 <_vfiprintf_r+0x15a>
 8004688:	9105      	str	r1, [sp, #20]
 800468a:	e7c4      	b.n	8004616 <_vfiprintf_r+0x15a>
 800468c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004690:	4604      	mov	r4, r0
 8004692:	2301      	movs	r3, #1
 8004694:	e7f0      	b.n	8004678 <_vfiprintf_r+0x1bc>
 8004696:	ab03      	add	r3, sp, #12
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	462a      	mov	r2, r5
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <_vfiprintf_r+0x22c>)
 800469e:	a904      	add	r1, sp, #16
 80046a0:	4630      	mov	r0, r6
 80046a2:	f3af 8000 	nop.w
 80046a6:	4607      	mov	r7, r0
 80046a8:	1c78      	adds	r0, r7, #1
 80046aa:	d1d6      	bne.n	800465a <_vfiprintf_r+0x19e>
 80046ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046ae:	07d9      	lsls	r1, r3, #31
 80046b0:	d405      	bmi.n	80046be <_vfiprintf_r+0x202>
 80046b2:	89ab      	ldrh	r3, [r5, #12]
 80046b4:	059a      	lsls	r2, r3, #22
 80046b6:	d402      	bmi.n	80046be <_vfiprintf_r+0x202>
 80046b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ba:	f7ff fddc 	bl	8004276 <__retarget_lock_release_recursive>
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	065b      	lsls	r3, r3, #25
 80046c2:	f53f af1d 	bmi.w	8004500 <_vfiprintf_r+0x44>
 80046c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046c8:	e71c      	b.n	8004504 <_vfiprintf_r+0x48>
 80046ca:	ab03      	add	r3, sp, #12
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	462a      	mov	r2, r5
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <_vfiprintf_r+0x22c>)
 80046d2:	a904      	add	r1, sp, #16
 80046d4:	4630      	mov	r0, r6
 80046d6:	f000 f879 	bl	80047cc <_printf_i>
 80046da:	e7e4      	b.n	80046a6 <_vfiprintf_r+0x1ea>
 80046dc:	08004dcc 	.word	0x08004dcc
 80046e0:	08004dd6 	.word	0x08004dd6
 80046e4:	00000000 	.word	0x00000000
 80046e8:	08004497 	.word	0x08004497
 80046ec:	08004dd2 	.word	0x08004dd2

080046f0 <_printf_common>:
 80046f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	4616      	mov	r6, r2
 80046f6:	4699      	mov	r9, r3
 80046f8:	688a      	ldr	r2, [r1, #8]
 80046fa:	690b      	ldr	r3, [r1, #16]
 80046fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004700:	4293      	cmp	r3, r2
 8004702:	bfb8      	it	lt
 8004704:	4613      	movlt	r3, r2
 8004706:	6033      	str	r3, [r6, #0]
 8004708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800470c:	4607      	mov	r7, r0
 800470e:	460c      	mov	r4, r1
 8004710:	b10a      	cbz	r2, 8004716 <_printf_common+0x26>
 8004712:	3301      	adds	r3, #1
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	0699      	lsls	r1, r3, #26
 800471a:	bf42      	ittt	mi
 800471c:	6833      	ldrmi	r3, [r6, #0]
 800471e:	3302      	addmi	r3, #2
 8004720:	6033      	strmi	r3, [r6, #0]
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	f015 0506 	ands.w	r5, r5, #6
 8004728:	d106      	bne.n	8004738 <_printf_common+0x48>
 800472a:	f104 0a19 	add.w	sl, r4, #25
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	6832      	ldr	r2, [r6, #0]
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	42ab      	cmp	r3, r5
 8004736:	dc26      	bgt.n	8004786 <_printf_common+0x96>
 8004738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800473c:	1e13      	subs	r3, r2, #0
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	bf18      	it	ne
 8004742:	2301      	movne	r3, #1
 8004744:	0692      	lsls	r2, r2, #26
 8004746:	d42b      	bmi.n	80047a0 <_printf_common+0xb0>
 8004748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474c:	4649      	mov	r1, r9
 800474e:	4638      	mov	r0, r7
 8004750:	47c0      	blx	r8
 8004752:	3001      	adds	r0, #1
 8004754:	d01e      	beq.n	8004794 <_printf_common+0xa4>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	6922      	ldr	r2, [r4, #16]
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf02      	ittt	eq
 8004762:	68e5      	ldreq	r5, [r4, #12]
 8004764:	6833      	ldreq	r3, [r6, #0]
 8004766:	1aed      	subeq	r5, r5, r3
 8004768:	68a3      	ldr	r3, [r4, #8]
 800476a:	bf0c      	ite	eq
 800476c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004770:	2500      	movne	r5, #0
 8004772:	4293      	cmp	r3, r2
 8004774:	bfc4      	itt	gt
 8004776:	1a9b      	subgt	r3, r3, r2
 8004778:	18ed      	addgt	r5, r5, r3
 800477a:	2600      	movs	r6, #0
 800477c:	341a      	adds	r4, #26
 800477e:	42b5      	cmp	r5, r6
 8004780:	d11a      	bne.n	80047b8 <_printf_common+0xc8>
 8004782:	2000      	movs	r0, #0
 8004784:	e008      	b.n	8004798 <_printf_common+0xa8>
 8004786:	2301      	movs	r3, #1
 8004788:	4652      	mov	r2, sl
 800478a:	4649      	mov	r1, r9
 800478c:	4638      	mov	r0, r7
 800478e:	47c0      	blx	r8
 8004790:	3001      	adds	r0, #1
 8004792:	d103      	bne.n	800479c <_printf_common+0xac>
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479c:	3501      	adds	r5, #1
 800479e:	e7c6      	b.n	800472e <_printf_common+0x3e>
 80047a0:	18e1      	adds	r1, r4, r3
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	2030      	movs	r0, #48	; 0x30
 80047a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047aa:	4422      	add	r2, r4
 80047ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047b4:	3302      	adds	r3, #2
 80047b6:	e7c7      	b.n	8004748 <_printf_common+0x58>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4622      	mov	r2, r4
 80047bc:	4649      	mov	r1, r9
 80047be:	4638      	mov	r0, r7
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d0e6      	beq.n	8004794 <_printf_common+0xa4>
 80047c6:	3601      	adds	r6, #1
 80047c8:	e7d9      	b.n	800477e <_printf_common+0x8e>
	...

080047cc <_printf_i>:
 80047cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	7e0f      	ldrb	r7, [r1, #24]
 80047d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047d4:	2f78      	cmp	r7, #120	; 0x78
 80047d6:	4691      	mov	r9, r2
 80047d8:	4680      	mov	r8, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	469a      	mov	sl, r3
 80047de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047e2:	d807      	bhi.n	80047f4 <_printf_i+0x28>
 80047e4:	2f62      	cmp	r7, #98	; 0x62
 80047e6:	d80a      	bhi.n	80047fe <_printf_i+0x32>
 80047e8:	2f00      	cmp	r7, #0
 80047ea:	f000 80d4 	beq.w	8004996 <_printf_i+0x1ca>
 80047ee:	2f58      	cmp	r7, #88	; 0x58
 80047f0:	f000 80c0 	beq.w	8004974 <_printf_i+0x1a8>
 80047f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047fc:	e03a      	b.n	8004874 <_printf_i+0xa8>
 80047fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004802:	2b15      	cmp	r3, #21
 8004804:	d8f6      	bhi.n	80047f4 <_printf_i+0x28>
 8004806:	a101      	add	r1, pc, #4	; (adr r1, 800480c <_printf_i+0x40>)
 8004808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800480c:	08004865 	.word	0x08004865
 8004810:	08004879 	.word	0x08004879
 8004814:	080047f5 	.word	0x080047f5
 8004818:	080047f5 	.word	0x080047f5
 800481c:	080047f5 	.word	0x080047f5
 8004820:	080047f5 	.word	0x080047f5
 8004824:	08004879 	.word	0x08004879
 8004828:	080047f5 	.word	0x080047f5
 800482c:	080047f5 	.word	0x080047f5
 8004830:	080047f5 	.word	0x080047f5
 8004834:	080047f5 	.word	0x080047f5
 8004838:	0800497d 	.word	0x0800497d
 800483c:	080048a5 	.word	0x080048a5
 8004840:	08004937 	.word	0x08004937
 8004844:	080047f5 	.word	0x080047f5
 8004848:	080047f5 	.word	0x080047f5
 800484c:	0800499f 	.word	0x0800499f
 8004850:	080047f5 	.word	0x080047f5
 8004854:	080048a5 	.word	0x080048a5
 8004858:	080047f5 	.word	0x080047f5
 800485c:	080047f5 	.word	0x080047f5
 8004860:	0800493f 	.word	0x0800493f
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	602a      	str	r2, [r5, #0]
 800486c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004874:	2301      	movs	r3, #1
 8004876:	e09f      	b.n	80049b8 <_printf_i+0x1ec>
 8004878:	6820      	ldr	r0, [r4, #0]
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	0607      	lsls	r7, r0, #24
 800487e:	f103 0104 	add.w	r1, r3, #4
 8004882:	6029      	str	r1, [r5, #0]
 8004884:	d501      	bpl.n	800488a <_printf_i+0xbe>
 8004886:	681e      	ldr	r6, [r3, #0]
 8004888:	e003      	b.n	8004892 <_printf_i+0xc6>
 800488a:	0646      	lsls	r6, r0, #25
 800488c:	d5fb      	bpl.n	8004886 <_printf_i+0xba>
 800488e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004892:	2e00      	cmp	r6, #0
 8004894:	da03      	bge.n	800489e <_printf_i+0xd2>
 8004896:	232d      	movs	r3, #45	; 0x2d
 8004898:	4276      	negs	r6, r6
 800489a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800489e:	485a      	ldr	r0, [pc, #360]	; (8004a08 <_printf_i+0x23c>)
 80048a0:	230a      	movs	r3, #10
 80048a2:	e012      	b.n	80048ca <_printf_i+0xfe>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	1d19      	adds	r1, r3, #4
 80048aa:	6029      	str	r1, [r5, #0]
 80048ac:	0605      	lsls	r5, r0, #24
 80048ae:	d501      	bpl.n	80048b4 <_printf_i+0xe8>
 80048b0:	681e      	ldr	r6, [r3, #0]
 80048b2:	e002      	b.n	80048ba <_printf_i+0xee>
 80048b4:	0641      	lsls	r1, r0, #25
 80048b6:	d5fb      	bpl.n	80048b0 <_printf_i+0xe4>
 80048b8:	881e      	ldrh	r6, [r3, #0]
 80048ba:	4853      	ldr	r0, [pc, #332]	; (8004a08 <_printf_i+0x23c>)
 80048bc:	2f6f      	cmp	r7, #111	; 0x6f
 80048be:	bf0c      	ite	eq
 80048c0:	2308      	moveq	r3, #8
 80048c2:	230a      	movne	r3, #10
 80048c4:	2100      	movs	r1, #0
 80048c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ca:	6865      	ldr	r5, [r4, #4]
 80048cc:	60a5      	str	r5, [r4, #8]
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	bfa2      	ittt	ge
 80048d2:	6821      	ldrge	r1, [r4, #0]
 80048d4:	f021 0104 	bicge.w	r1, r1, #4
 80048d8:	6021      	strge	r1, [r4, #0]
 80048da:	b90e      	cbnz	r6, 80048e0 <_printf_i+0x114>
 80048dc:	2d00      	cmp	r5, #0
 80048de:	d04b      	beq.n	8004978 <_printf_i+0x1ac>
 80048e0:	4615      	mov	r5, r2
 80048e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048e6:	fb03 6711 	mls	r7, r3, r1, r6
 80048ea:	5dc7      	ldrb	r7, [r0, r7]
 80048ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048f0:	4637      	mov	r7, r6
 80048f2:	42bb      	cmp	r3, r7
 80048f4:	460e      	mov	r6, r1
 80048f6:	d9f4      	bls.n	80048e2 <_printf_i+0x116>
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d10b      	bne.n	8004914 <_printf_i+0x148>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	07de      	lsls	r6, r3, #31
 8004900:	d508      	bpl.n	8004914 <_printf_i+0x148>
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	6861      	ldr	r1, [r4, #4]
 8004906:	4299      	cmp	r1, r3
 8004908:	bfde      	ittt	le
 800490a:	2330      	movle	r3, #48	; 0x30
 800490c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004914:	1b52      	subs	r2, r2, r5
 8004916:	6122      	str	r2, [r4, #16]
 8004918:	f8cd a000 	str.w	sl, [sp]
 800491c:	464b      	mov	r3, r9
 800491e:	aa03      	add	r2, sp, #12
 8004920:	4621      	mov	r1, r4
 8004922:	4640      	mov	r0, r8
 8004924:	f7ff fee4 	bl	80046f0 <_printf_common>
 8004928:	3001      	adds	r0, #1
 800492a:	d14a      	bne.n	80049c2 <_printf_i+0x1f6>
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	b004      	add	sp, #16
 8004932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	f043 0320 	orr.w	r3, r3, #32
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	4833      	ldr	r0, [pc, #204]	; (8004a0c <_printf_i+0x240>)
 8004940:	2778      	movs	r7, #120	; 0x78
 8004942:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	6829      	ldr	r1, [r5, #0]
 800494a:	061f      	lsls	r7, r3, #24
 800494c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004950:	d402      	bmi.n	8004958 <_printf_i+0x18c>
 8004952:	065f      	lsls	r7, r3, #25
 8004954:	bf48      	it	mi
 8004956:	b2b6      	uxthmi	r6, r6
 8004958:	07df      	lsls	r7, r3, #31
 800495a:	bf48      	it	mi
 800495c:	f043 0320 	orrmi.w	r3, r3, #32
 8004960:	6029      	str	r1, [r5, #0]
 8004962:	bf48      	it	mi
 8004964:	6023      	strmi	r3, [r4, #0]
 8004966:	b91e      	cbnz	r6, 8004970 <_printf_i+0x1a4>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	f023 0320 	bic.w	r3, r3, #32
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	2310      	movs	r3, #16
 8004972:	e7a7      	b.n	80048c4 <_printf_i+0xf8>
 8004974:	4824      	ldr	r0, [pc, #144]	; (8004a08 <_printf_i+0x23c>)
 8004976:	e7e4      	b.n	8004942 <_printf_i+0x176>
 8004978:	4615      	mov	r5, r2
 800497a:	e7bd      	b.n	80048f8 <_printf_i+0x12c>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	6826      	ldr	r6, [r4, #0]
 8004980:	6961      	ldr	r1, [r4, #20]
 8004982:	1d18      	adds	r0, r3, #4
 8004984:	6028      	str	r0, [r5, #0]
 8004986:	0635      	lsls	r5, r6, #24
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	d501      	bpl.n	8004990 <_printf_i+0x1c4>
 800498c:	6019      	str	r1, [r3, #0]
 800498e:	e002      	b.n	8004996 <_printf_i+0x1ca>
 8004990:	0670      	lsls	r0, r6, #25
 8004992:	d5fb      	bpl.n	800498c <_printf_i+0x1c0>
 8004994:	8019      	strh	r1, [r3, #0]
 8004996:	2300      	movs	r3, #0
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	4615      	mov	r5, r2
 800499c:	e7bc      	b.n	8004918 <_printf_i+0x14c>
 800499e:	682b      	ldr	r3, [r5, #0]
 80049a0:	1d1a      	adds	r2, r3, #4
 80049a2:	602a      	str	r2, [r5, #0]
 80049a4:	681d      	ldr	r5, [r3, #0]
 80049a6:	6862      	ldr	r2, [r4, #4]
 80049a8:	2100      	movs	r1, #0
 80049aa:	4628      	mov	r0, r5
 80049ac:	f7fb fc30 	bl	8000210 <memchr>
 80049b0:	b108      	cbz	r0, 80049b6 <_printf_i+0x1ea>
 80049b2:	1b40      	subs	r0, r0, r5
 80049b4:	6060      	str	r0, [r4, #4]
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	2300      	movs	r3, #0
 80049bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c0:	e7aa      	b.n	8004918 <_printf_i+0x14c>
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	462a      	mov	r2, r5
 80049c6:	4649      	mov	r1, r9
 80049c8:	4640      	mov	r0, r8
 80049ca:	47d0      	blx	sl
 80049cc:	3001      	adds	r0, #1
 80049ce:	d0ad      	beq.n	800492c <_printf_i+0x160>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	079b      	lsls	r3, r3, #30
 80049d4:	d413      	bmi.n	80049fe <_printf_i+0x232>
 80049d6:	68e0      	ldr	r0, [r4, #12]
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	4298      	cmp	r0, r3
 80049dc:	bfb8      	it	lt
 80049de:	4618      	movlt	r0, r3
 80049e0:	e7a6      	b.n	8004930 <_printf_i+0x164>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4632      	mov	r2, r6
 80049e6:	4649      	mov	r1, r9
 80049e8:	4640      	mov	r0, r8
 80049ea:	47d0      	blx	sl
 80049ec:	3001      	adds	r0, #1
 80049ee:	d09d      	beq.n	800492c <_printf_i+0x160>
 80049f0:	3501      	adds	r5, #1
 80049f2:	68e3      	ldr	r3, [r4, #12]
 80049f4:	9903      	ldr	r1, [sp, #12]
 80049f6:	1a5b      	subs	r3, r3, r1
 80049f8:	42ab      	cmp	r3, r5
 80049fa:	dcf2      	bgt.n	80049e2 <_printf_i+0x216>
 80049fc:	e7eb      	b.n	80049d6 <_printf_i+0x20a>
 80049fe:	2500      	movs	r5, #0
 8004a00:	f104 0619 	add.w	r6, r4, #25
 8004a04:	e7f5      	b.n	80049f2 <_printf_i+0x226>
 8004a06:	bf00      	nop
 8004a08:	08004ddd 	.word	0x08004ddd
 8004a0c:	08004dee 	.word	0x08004dee

08004a10 <__sflush_r>:
 8004a10:	898a      	ldrh	r2, [r1, #12]
 8004a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a16:	4605      	mov	r5, r0
 8004a18:	0710      	lsls	r0, r2, #28
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	d458      	bmi.n	8004ad0 <__sflush_r+0xc0>
 8004a1e:	684b      	ldr	r3, [r1, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	dc05      	bgt.n	8004a30 <__sflush_r+0x20>
 8004a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	dc02      	bgt.n	8004a30 <__sflush_r+0x20>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	d0f9      	beq.n	8004a2a <__sflush_r+0x1a>
 8004a36:	2300      	movs	r3, #0
 8004a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a3c:	682f      	ldr	r7, [r5, #0]
 8004a3e:	6a21      	ldr	r1, [r4, #32]
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	d032      	beq.n	8004aaa <__sflush_r+0x9a>
 8004a44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	075a      	lsls	r2, r3, #29
 8004a4a:	d505      	bpl.n	8004a58 <__sflush_r+0x48>
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	1ac0      	subs	r0, r0, r3
 8004a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a52:	b10b      	cbz	r3, 8004a58 <__sflush_r+0x48>
 8004a54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a56:	1ac0      	subs	r0, r0, r3
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a5e:	6a21      	ldr	r1, [r4, #32]
 8004a60:	4628      	mov	r0, r5
 8004a62:	47b0      	blx	r6
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	d106      	bne.n	8004a78 <__sflush_r+0x68>
 8004a6a:	6829      	ldr	r1, [r5, #0]
 8004a6c:	291d      	cmp	r1, #29
 8004a6e:	d82b      	bhi.n	8004ac8 <__sflush_r+0xb8>
 8004a70:	4a29      	ldr	r2, [pc, #164]	; (8004b18 <__sflush_r+0x108>)
 8004a72:	410a      	asrs	r2, r1
 8004a74:	07d6      	lsls	r6, r2, #31
 8004a76:	d427      	bmi.n	8004ac8 <__sflush_r+0xb8>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	6062      	str	r2, [r4, #4]
 8004a7c:	04d9      	lsls	r1, r3, #19
 8004a7e:	6922      	ldr	r2, [r4, #16]
 8004a80:	6022      	str	r2, [r4, #0]
 8004a82:	d504      	bpl.n	8004a8e <__sflush_r+0x7e>
 8004a84:	1c42      	adds	r2, r0, #1
 8004a86:	d101      	bne.n	8004a8c <__sflush_r+0x7c>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	b903      	cbnz	r3, 8004a8e <__sflush_r+0x7e>
 8004a8c:	6560      	str	r0, [r4, #84]	; 0x54
 8004a8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a90:	602f      	str	r7, [r5, #0]
 8004a92:	2900      	cmp	r1, #0
 8004a94:	d0c9      	beq.n	8004a2a <__sflush_r+0x1a>
 8004a96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9a:	4299      	cmp	r1, r3
 8004a9c:	d002      	beq.n	8004aa4 <__sflush_r+0x94>
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f7ff fbea 	bl	8004278 <_free_r>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	6360      	str	r0, [r4, #52]	; 0x34
 8004aa8:	e7c0      	b.n	8004a2c <__sflush_r+0x1c>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b0      	blx	r6
 8004ab0:	1c41      	adds	r1, r0, #1
 8004ab2:	d1c8      	bne.n	8004a46 <__sflush_r+0x36>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0c5      	beq.n	8004a46 <__sflush_r+0x36>
 8004aba:	2b1d      	cmp	r3, #29
 8004abc:	d001      	beq.n	8004ac2 <__sflush_r+0xb2>
 8004abe:	2b16      	cmp	r3, #22
 8004ac0:	d101      	bne.n	8004ac6 <__sflush_r+0xb6>
 8004ac2:	602f      	str	r7, [r5, #0]
 8004ac4:	e7b1      	b.n	8004a2a <__sflush_r+0x1a>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	e7ad      	b.n	8004a2c <__sflush_r+0x1c>
 8004ad0:	690f      	ldr	r7, [r1, #16]
 8004ad2:	2f00      	cmp	r7, #0
 8004ad4:	d0a9      	beq.n	8004a2a <__sflush_r+0x1a>
 8004ad6:	0793      	lsls	r3, r2, #30
 8004ad8:	680e      	ldr	r6, [r1, #0]
 8004ada:	bf08      	it	eq
 8004adc:	694b      	ldreq	r3, [r1, #20]
 8004ade:	600f      	str	r7, [r1, #0]
 8004ae0:	bf18      	it	ne
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	eba6 0807 	sub.w	r8, r6, r7
 8004ae8:	608b      	str	r3, [r1, #8]
 8004aea:	f1b8 0f00 	cmp.w	r8, #0
 8004aee:	dd9c      	ble.n	8004a2a <__sflush_r+0x1a>
 8004af0:	6a21      	ldr	r1, [r4, #32]
 8004af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004af4:	4643      	mov	r3, r8
 8004af6:	463a      	mov	r2, r7
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b0      	blx	r6
 8004afc:	2800      	cmp	r0, #0
 8004afe:	dc06      	bgt.n	8004b0e <__sflush_r+0xfe>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	e78e      	b.n	8004a2c <__sflush_r+0x1c>
 8004b0e:	4407      	add	r7, r0
 8004b10:	eba8 0800 	sub.w	r8, r8, r0
 8004b14:	e7e9      	b.n	8004aea <__sflush_r+0xda>
 8004b16:	bf00      	nop
 8004b18:	dfbffffe 	.word	0xdfbffffe

08004b1c <_fflush_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	690b      	ldr	r3, [r1, #16]
 8004b20:	4605      	mov	r5, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b913      	cbnz	r3, 8004b2c <_fflush_r+0x10>
 8004b26:	2500      	movs	r5, #0
 8004b28:	4628      	mov	r0, r5
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	b118      	cbz	r0, 8004b36 <_fflush_r+0x1a>
 8004b2e:	6a03      	ldr	r3, [r0, #32]
 8004b30:	b90b      	cbnz	r3, 8004b36 <_fflush_r+0x1a>
 8004b32:	f7ff f9ab 	bl	8003e8c <__sinit>
 8004b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f3      	beq.n	8004b26 <_fflush_r+0xa>
 8004b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b40:	07d0      	lsls	r0, r2, #31
 8004b42:	d404      	bmi.n	8004b4e <_fflush_r+0x32>
 8004b44:	0599      	lsls	r1, r3, #22
 8004b46:	d402      	bmi.n	8004b4e <_fflush_r+0x32>
 8004b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b4a:	f7ff fb93 	bl	8004274 <__retarget_lock_acquire_recursive>
 8004b4e:	4628      	mov	r0, r5
 8004b50:	4621      	mov	r1, r4
 8004b52:	f7ff ff5d 	bl	8004a10 <__sflush_r>
 8004b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b58:	07da      	lsls	r2, r3, #31
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	d4e4      	bmi.n	8004b28 <_fflush_r+0xc>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	059b      	lsls	r3, r3, #22
 8004b62:	d4e1      	bmi.n	8004b28 <_fflush_r+0xc>
 8004b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b66:	f7ff fb86 	bl	8004276 <__retarget_lock_release_recursive>
 8004b6a:	e7dd      	b.n	8004b28 <_fflush_r+0xc>

08004b6c <__swhatbuf_r>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	460c      	mov	r4, r1
 8004b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b74:	2900      	cmp	r1, #0
 8004b76:	b096      	sub	sp, #88	; 0x58
 8004b78:	4615      	mov	r5, r2
 8004b7a:	461e      	mov	r6, r3
 8004b7c:	da0d      	bge.n	8004b9a <__swhatbuf_r+0x2e>
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b84:	f04f 0100 	mov.w	r1, #0
 8004b88:	bf0c      	ite	eq
 8004b8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b8e:	2340      	movne	r3, #64	; 0x40
 8004b90:	2000      	movs	r0, #0
 8004b92:	6031      	str	r1, [r6, #0]
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	b016      	add	sp, #88	; 0x58
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	466a      	mov	r2, sp
 8004b9c:	f000 f848 	bl	8004c30 <_fstat_r>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	dbec      	blt.n	8004b7e <__swhatbuf_r+0x12>
 8004ba4:	9901      	ldr	r1, [sp, #4]
 8004ba6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004baa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004bae:	4259      	negs	r1, r3
 8004bb0:	4159      	adcs	r1, r3
 8004bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb6:	e7eb      	b.n	8004b90 <__swhatbuf_r+0x24>

08004bb8 <__smakebuf_r>:
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bbc:	079d      	lsls	r5, r3, #30
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	d507      	bpl.n	8004bd4 <__smakebuf_r+0x1c>
 8004bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	ab01      	add	r3, sp, #4
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	f7ff ffc8 	bl	8004b6c <__swhatbuf_r>
 8004bdc:	9900      	ldr	r1, [sp, #0]
 8004bde:	4605      	mov	r5, r0
 8004be0:	4630      	mov	r0, r6
 8004be2:	f7ff fbb5 	bl	8004350 <_malloc_r>
 8004be6:	b948      	cbnz	r0, 8004bfc <__smakebuf_r+0x44>
 8004be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d4ef      	bmi.n	8004bd0 <__smakebuf_r+0x18>
 8004bf0:	f023 0303 	bic.w	r3, r3, #3
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	e7e3      	b.n	8004bc4 <__smakebuf_r+0xc>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	6020      	str	r0, [r4, #0]
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	9b00      	ldr	r3, [sp, #0]
 8004c08:	6163      	str	r3, [r4, #20]
 8004c0a:	9b01      	ldr	r3, [sp, #4]
 8004c0c:	6120      	str	r0, [r4, #16]
 8004c0e:	b15b      	cbz	r3, 8004c28 <__smakebuf_r+0x70>
 8004c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 f81d 	bl	8004c54 <_isatty_r>
 8004c1a:	b128      	cbz	r0, 8004c28 <__smakebuf_r+0x70>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	431d      	orrs	r5, r3
 8004c2c:	81a5      	strh	r5, [r4, #12]
 8004c2e:	e7cf      	b.n	8004bd0 <__smakebuf_r+0x18>

08004c30 <_fstat_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	; (8004c50 <_fstat_r+0x20>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	f7fc f98a 	bl	8000f56 <_fstat>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d102      	bne.n	8004c4c <_fstat_r+0x1c>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	b103      	cbz	r3, 8004c4c <_fstat_r+0x1c>
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	bd38      	pop	{r3, r4, r5, pc}
 8004c4e:	bf00      	nop
 8004c50:	200002f8 	.word	0x200002f8

08004c54 <_isatty_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d06      	ldr	r5, [pc, #24]	; (8004c70 <_isatty_r+0x1c>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f7fc f989 	bl	8000f76 <_isatty>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_isatty_r+0x1a>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_isatty_r+0x1a>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	200002f8 	.word	0x200002f8

08004c74 <_sbrk_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d06      	ldr	r5, [pc, #24]	; (8004c90 <_sbrk_r+0x1c>)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	f7fc f992 	bl	8000fa8 <_sbrk>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_sbrk_r+0x1a>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_sbrk_r+0x1a>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	200002f8 	.word	0x200002f8

08004c94 <_init>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_fini>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr
